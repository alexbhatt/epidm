[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Bhattacharya. Author, maintainer. Alice Graham. Author. Harshana Liyanage. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bhattacharya , Graham , Liyanage H (2024). epidm: UK Epidemiological Data Management. R package version 1.0.5, https://alexbhatt.github.io/epidm/, https://github.com/alexbhatt/epidm.","code":"@Manual{,   title = {epidm: UK Epidemiological Data Management},   author = {Alex Bhattacharya and Alice Graham and Harshana Liyanage},   year = {2024},   note = {R package version 1.0.5, https://alexbhatt.github.io/epidm/},   url = {https://github.com/alexbhatt/epidm}, }"},{"path":"/index.html","id":"epidemiological-data-management-epidm","dir":"","previous_headings":"","what":"Epidmiological Data Management [epidm]","title":"Epidmiological Data Management [epidm]","text":"goal epidm provide standard methods management transformation UK Public Health data. full function guide can found ","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Epidmiological Data Management [epidm]","text":"Available via CRAN can download development version via GitHub","code":"install.packages(\"epidm\") devtools::install_github(\"alexbhatt/epidm\")"},{"path":"/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Epidmiological Data Management [epidm]","text":"epidm package developed share standard methods processing epidemiological data UK. Key data assets focuses include","code":""},{"path":"/index.html","id":"infection-data","dir":"","previous_headings":"Purpose","what":"Infection data","title":"Epidmiological Data Management [epidm]","text":"Second Generation Surveillance System (SGSS) data asset held UK Health Security Agency (formerly Public Health England) routinely automatically collects laboratory data across England. Laboratories return data organisms isolated samples organism species, specimen type, sampling date antimicrobial susceptibility testing results. data routinely used public health surveillance epidemiology England.","code":""},{"path":"/index.html","id":"hospital-data","dir":"","previous_headings":"Purpose","what":"Hospital data","title":"Epidmiological Data Management [epidm]","text":"functions dealing hospital data within epidm designed help clean, process, link hospital meaningful way. methods used help understand Healthcare Associated COVID-19 England.","code":""},{"path":"/index.html","id":"emergency-care-data-set-ecds","dir":"","previous_headings":"Purpose > Hospital data","what":"Emergency Care Data Set (ECDS)","title":"Epidmiological Data Management [epidm]","text":"ECDS national data set urgent emergency care reported daily NHS Trusts.","code":""},{"path":"/index.html","id":"secondary-use-services-sus","dir":"","previous_headings":"Purpose > Hospital data","what":"Secondary Use Services (SUS)","title":"Epidmiological Data Management [epidm]","text":"SUS single, comprehensive repository healthcare data England enables range reporting analyses support NHS delivery healthcare services. SUS reported monthly, 21st month previous months data.","code":""},{"path":"/index.html","id":"hospital-episode-statistics-hes","dir":"","previous_headings":"Purpose > Hospital data","what":"Hospital Episode Statistics (HES)","title":"Epidmiological Data Management [epidm]","text":"HES data warehouse containing details admissions, outpatient appointments E attendances NHS hospitals England. Hes reported quarterly, ‘cleaned’ version SUS ECDS.","code":""},{"path":"/reference/cip_spells.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous Inpatient (CIP) Spells — cip_spells","title":"Continuous Inpatient (CIP) Spells — cip_spells","text":"continuous inpatient (CIP) spell continuous period care within NHS, allow specific types transfers take place. can therefore made one provider spells. CIP spell starts decision made admit patient, consultant taken responsibility care. spell ends patient dies discharged hospital. follows NHS Digital Provider Spells Methodology: http://content.digital.nhs.uk/media/11859/Provider-Spells-Methodology/pdf/Spells_Methodology.pdf","code":""},{"path":"/reference/cip_spells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous Inpatient (CIP) Spells — cip_spells","text":"","code":"cip_spells(   x,   group_vars,   spell_start_date,   admission_method,   admission_source,   spell_end_date,   discharge_destination,   patient_classification,   .forceCopy = FALSE )"},{"path":"/reference/cip_spells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous Inpatient (CIP) Spells — cip_spells","text":"x data frame; converted data.table group_vars vector containing variables used record grouping, minimum patient identifier spell_start_date Inpatient provider spell episode admission date admission_method CDS admission method code admission_source CDS admission source code spell_end_date Inpatient provider spell episode discharge  date discharge_destination CDS discharge destination code patient_classification CDS patient classification code .forceCopy default FALSE; TRUE force data.table take copy instead editing data without reference","code":""},{"path":"/reference/cip_spells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continuous Inpatient (CIP) Spells — cip_spells","text":"original data.frame data.table following new fields: cip_indx id field CIP spell cip_spell_start start date CIP spell cip_spell_end end date CIP spell","code":""},{"path":"/reference/cip_spells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continuous Inpatient (CIP) Spells — cip_spells","text":"","code":"cip_test <- data.frame(   id = c('465','465','465','465','8418','8418','8418',          '8418','8418','8418','8418','8418','26443',          '26443','26443','33299','33299','33299','33299',          '33299','33299','33299','33299','33299','33299',          '52635','52635','52635','52635','52635','52635',          '52635','52635','52635','52635','52635','52635',          '52635','52635','52635','52635','52635','52635',          '52635','52635','52635','52635','52635','52635',          '52635','52635','52635','78915','78915','78915'),   provider = c('X1T','X1T','X1T','X1T','KHA','KHA','KHA',                'KHA','KHA','KHA','KHA','KHA','BX2','BX2',                'BX2','PXH','PXH','PXH','PXH','PXH','PXH',                'PXH','PXH','PXH','PXH','9HA','9HA','9HA',                '9HA','9HA','9HA','9HA','9HA','9HA','9HA',                '9HA','9HA','9HA','9HA','9HA','9HA','YYT',                'YYT','YYT','YYT','YYT','YYT','YYT','YYT',                'YYT','YYT','YYT','ABX','ABX','ABX'),   spell_start = as.Date(c(     '2020-03-07','2020-03-07','2020-03-25','2020-04-03','2020-01-25',     '2020-01-26','2020-07-14','2020-08-02','2020-08-12','2020-08-19',     '2020-08-19','2020-11-19','2019-11-12','2020-04-17','2020-04-23',     '2020-07-03','2020-01-17','2020-02-07','2020-03-20','2020-04-27',     '2020-06-21','2020-07-02','2020-10-17','2020-11-27','2021-01-02',     '2019-12-31','2020-01-02','2020-01-14','2020-01-16','2020-02-07',     '2020-02-11','2020-02-14','2020-02-18','2020-02-21','2020-02-25',     '2020-02-28','2020-03-09','2020-03-11','2020-03-12','2020-03-13',     '2020-03-14','2020-02-04','2020-02-07','2020-02-11','2020-02-14',     '2020-02-18','2020-02-21','2020-02-25','2020-02-28','2020-03-09',     '2020-03-11','2020-03-12','2020-04-16','2020-04-24','2020-05-13')),   spell_end = as.Date(c(     '2020-03-07','2020-03-25','2020-04-02','2020-04-27','2020-01-25',     '2020-01-27','2020-07-17','2020-08-07','2020-08-14','2020-08-19',     '2020-08-22','2020-12-16','2020-04-17','2020-04-23','2020-05-20',     '2020-07-24','2020-01-28','2020-02-07','2020-03-23','2020-04-29',     '2020-06-21','2020-07-03','2020-11-27','2021-01-02','2021-01-10',     '2019-12-31','2020-01-11','2020-01-14','2020-02-04','2020-02-07',     '2020-02-11','2020-02-14','2020-02-18','2020-02-21','2020-02-25',     '2020-02-28','2020-03-09','2020-03-11','2020-03-12','2020-03-13',     '2020-03-30','2020-02-07','2020-02-11','2020-02-14','2020-02-18',     '2020-02-21','2020-02-25','2020-02-28','2020-03-09','2020-03-11',     '2020-03-12','2020-03-13','2020-04-24','2020-05-13','2020-06-11')),   adm_meth = c('21','81','21','81','21','21','11','21','21','21','21',                '21','21','81','21','81','21','21','21','21','21','21',                '21','13','13','12','22','12','2D','13','13','13','13',                '13','13','13','13','13','13','13','21','81','81','81',                '81','81','13','81','81','13','13','13','21','11','81'),   adm_src = c('19','51','19','51','19','51','19','51','19','19','19',               '51','19','51','19','51','19','19','19','19','19','19',               '19','51','19','19','19','19','19','19','19','19','19',               '19','19','19','51','51','51','51','19','51','51','51',               '51','51','51','51','51','51','51','51','19','51','51'),   dis_meth = c('1','1','1','1','1','1','1','1','1','1','1','4','1','1',                '4','1','1','1','1','1','1','1','8','1','4','1','1','1',                '1','1','1','1','1','1','1','1','1','1','1','1','1','1',                '1','1','1','1','1','1','1','1','1','1','1','1','2'),   dis_dest = c('51','51','51','54','51','19','19','19','19','51','19',                '79','51','51','79','65','19','19','19','19','19','29',                '98','51','79','19','19','19','51','19','19','19','51',                '51','51','19','19','51','51','19','51','51','51','51',                '51','51','51','51','51','51','51','51','29','54','19'),   patclass = c('1','1','1','1','1','1','1','1','1','1','1','1','1','1',                '1','1','1','1','1','1','1','1','1','1','1','2','1','2',                '1','2','2','2','2','2','2','2','2','2','2','2','1','1',                '1','1','1','1','1','1','1','1','1','1','1','1','1') )  cip_spells(x=cip_test,   group_vars = c('id','provider'),   patient_classification = 'patclass',   spell_start_date = 'spell_start',   admission_method = 'adm_meth',   admission_source = 'adm_src',   spell_end_date = 'spell_end',   discharge_destination = 'dis_dest' )[] #>         id provider spell_start  spell_end adm_meth adm_src dis_meth dis_dest #>     <char>   <char>      <Date>     <Date>   <char>  <char>   <char>   <char> #>  1:  26443      BX2  2019-11-12 2020-04-17       21      19        1       51 #>  2:  26443      BX2  2020-04-17 2020-04-23       81      51        1       51 #>  3:  26443      BX2  2020-04-23 2020-05-20       21      19        4       79 #>  4:  33299      PXH  2020-01-17 2020-01-28       21      19        1       19 #>  5:  33299      PXH  2020-02-07 2020-02-07       21      19        1       19 #>  6:  33299      PXH  2020-03-20 2020-03-23       21      19        1       19 #>  7:  33299      PXH  2020-04-27 2020-04-29       21      19        1       19 #>  8:  33299      PXH  2020-06-21 2020-06-21       21      19        1       19 #>  9:  33299      PXH  2020-07-02 2020-07-03       21      19        1       29 #> 10:  33299      PXH  2020-07-03 2020-07-24       81      51        1       65 #> 11:  33299      PXH  2020-10-17 2020-11-27       21      19        8       98 #> 12:  33299      PXH  2020-11-27 2021-01-02       13      51        1       51 #> 13:  33299      PXH  2021-01-02 2021-01-10       13      19        4       79 #> 14:    465      X1T  2020-03-07 2020-03-07       21      19        1       51 #> 15:    465      X1T  2020-03-07 2020-03-25       81      51        1       51 #> 16:    465      X1T  2020-03-25 2020-04-02       21      19        1       51 #> 17:    465      X1T  2020-04-03 2020-04-27       81      51        1       54 #> 18:  52635      9HA  2019-12-31 2019-12-31       12      19        1       19 #> 19:  52635      9HA  2020-01-02 2020-01-11       22      19        1       19 #> 20:  52635      9HA  2020-01-14 2020-01-14       12      19        1       19 #> 21:  52635      9HA  2020-01-16 2020-02-04       2D      19        1       51 #> 22:  52635      9HA  2020-02-07 2020-02-07       13      19        1       19 #> 23:  52635      9HA  2020-02-11 2020-02-11       13      19        1       19 #> 24:  52635      9HA  2020-02-14 2020-02-14       13      19        1       19 #> 25:  52635      9HA  2020-02-18 2020-02-18       13      19        1       51 #> 26:  52635      9HA  2020-02-21 2020-02-21       13      19        1       51 #> 27:  52635      9HA  2020-02-25 2020-02-25       13      19        1       51 #> 28:  52635      9HA  2020-02-28 2020-02-28       13      19        1       19 #> 29:  52635      9HA  2020-03-09 2020-03-09       13      51        1       19 #> 30:  52635      9HA  2020-03-11 2020-03-11       13      51        1       51 #> 31:  52635      9HA  2020-03-12 2020-03-12       13      51        1       51 #> 32:  52635      9HA  2020-03-13 2020-03-13       13      51        1       19 #> 33:  52635      9HA  2020-03-14 2020-03-30       21      19        1       51 #> 34:  52635      YYT  2020-02-04 2020-02-07       81      51        1       51 #> 35:  52635      YYT  2020-02-07 2020-02-11       81      51        1       51 #> 36:  52635      YYT  2020-02-11 2020-02-14       81      51        1       51 #> 37:  52635      YYT  2020-02-14 2020-02-18       81      51        1       51 #> 38:  52635      YYT  2020-02-18 2020-02-21       81      51        1       51 #> 39:  52635      YYT  2020-02-21 2020-02-25       13      51        1       51 #> 40:  52635      YYT  2020-02-25 2020-02-28       81      51        1       51 #> 41:  52635      YYT  2020-02-28 2020-03-09       81      51        1       51 #> 42:  52635      YYT  2020-03-09 2020-03-11       13      51        1       51 #> 43:  52635      YYT  2020-03-11 2020-03-12       13      51        1       51 #> 44:  52635      YYT  2020-03-12 2020-03-13       13      51        1       51 #> 45:  78915      ABX  2020-04-16 2020-04-24       21      19        1       29 #> 46:  78915      ABX  2020-04-24 2020-05-13       11      51        1       54 #> 47:  78915      ABX  2020-05-13 2020-06-11       81      51        2       19 #> 48:   8418      KHA  2020-01-25 2020-01-25       21      19        1       51 #> 49:   8418      KHA  2020-01-26 2020-01-27       21      51        1       19 #> 50:   8418      KHA  2020-07-14 2020-07-17       11      19        1       19 #> 51:   8418      KHA  2020-08-02 2020-08-07       21      51        1       19 #> 52:   8418      KHA  2020-08-12 2020-08-14       21      19        1       19 #> 53:   8418      KHA  2020-08-19 2020-08-19       21      19        1       51 #> 54:   8418      KHA  2020-08-19 2020-08-22       21      19        1       19 #> 55:   8418      KHA  2020-11-19 2020-12-16       21      51        4       79 #>         id provider spell_start  spell_end adm_meth adm_src dis_meth dis_dest #>     patclass proxy_missing cip_indx cip_spell_start cip_spell_end #>       <char>         <num>   <char>          <Date>        <Date> #>  1:        1             0    1.3.0      2019-11-12    2020-05-20 #>  2:        1             0    1.3.0      2019-11-12    2020-05-20 #>  3:        1             0    1.3.0      2019-11-12    2020-05-20 #>  4:        1             0   2.10.0      2020-01-17    2020-01-28 #>  5:        1             0   2.10.1      2020-02-07    2020-02-07 #>  6:        1             0   2.10.2      2020-03-20    2020-03-23 #>  7:        1             0   2.10.3      2020-04-27    2020-04-29 #>  8:        1             0   2.10.4      2020-06-21    2020-06-21 #>  9:        1             0   2.10.5      2020-07-02    2020-07-24 #> 10:        1             0   2.10.5      2020-07-02    2020-07-24 #> 11:        1             0   2.10.6      2020-10-17    2021-01-10 #> 12:        1             0   2.10.6      2020-10-17    2021-01-10 #> 13:        1             0   2.10.6      2020-10-17    2021-01-10 #> 14:        1             0    3.4.0      2020-03-07    2020-04-02 #> 15:        1             0    3.4.0      2020-03-07    2020-04-02 #> 16:        1             0    3.4.0      2020-03-07    2020-04-02 #> 17:        1             0    3.4.1      2020-04-03    2020-04-27 #> 18:        2             0   4.16.0      2019-12-31    2019-12-31 #> 19:        1             0   4.16.1      2020-01-02    2020-01-11 #> 20:        2             0   4.16.2      2020-01-14    2020-01-14 #> 21:        1             0   4.16.3      2020-01-16    2020-02-04 #> 22:        2             0   4.16.4      2020-02-07    2020-02-07 #> 23:        2             0   4.16.5      2020-02-11    2020-02-11 #> 24:        2             0   4.16.6      2020-02-14    2020-02-14 #> 25:        2             0   4.16.7      2020-02-18    2020-02-18 #> 26:        2             0   4.16.8      2020-02-21    2020-02-21 #> 27:        2             0   4.16.9      2020-02-25    2020-02-25 #> 28:        2             0  4.16.10      2020-02-28    2020-02-28 #> 29:        2             0  4.16.11      2020-03-09    2020-03-09 #> 30:        2             0  4.16.12      2020-03-11    2020-03-11 #> 31:        2             0  4.16.13      2020-03-12    2020-03-12 #> 32:        2             0  4.16.14      2020-03-13    2020-03-13 #> 33:        1             0  4.16.16      2020-03-14    2020-03-30 #> 34:        1             0   5.11.0      2020-02-04    2020-03-13 #> 35:        1             0   5.11.0      2020-02-04    2020-03-13 #> 36:        1             0   5.11.0      2020-02-04    2020-03-13 #> 37:        1             0   5.11.0      2020-02-04    2020-03-13 #> 38:        1             0   5.11.0      2020-02-04    2020-03-13 #> 39:        1             0   5.11.0      2020-02-04    2020-03-13 #> 40:        1             0   5.11.0      2020-02-04    2020-03-13 #> 41:        1             0   5.11.0      2020-02-04    2020-03-13 #> 42:        1             0   5.11.0      2020-02-04    2020-03-13 #> 43:        1             0   5.11.0      2020-02-04    2020-03-13 #> 44:        1             0   5.11.0      2020-02-04    2020-03-13 #> 45:        1             0    6.3.0      2020-04-16    2020-06-11 #> 46:        1             0    6.3.0      2020-04-16    2020-06-11 #> 47:        1             0    6.3.0      2020-04-16    2020-06-11 #> 48:        1             0    7.8.0      2020-01-25    2020-01-25 #> 49:        1             0    7.8.1      2020-01-26    2020-01-27 #> 50:        1             0    7.8.2      2020-07-14    2020-07-17 #> 51:        1             0    7.8.3      2020-08-02    2020-08-07 #> 52:        1             0    7.8.4      2020-08-12    2020-08-14 #> 53:        1             0    7.8.5      2020-08-19    2020-08-22 #> 54:        1             0    7.8.5      2020-08-19    2020-08-22 #> 55:        1             0    7.8.7      2020-11-19    2020-12-16 #>     patclass proxy_missing cip_indx cip_spell_start cip_spell_end"},{"path":"/reference/csv_from_zip.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a csv from a zip — csv_from_zip","title":"Download a csv from a zip — csv_from_zip","text":"convenience function allow pull data NHS, ONS ODR assets","code":""},{"path":"/reference/csv_from_zip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a csv from a zip — csv_from_zip","text":"","code":"csv_from_zip(x)"},{"path":"/reference/csv_from_zip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a csv from a zip — csv_from_zip","text":"x zip file web","code":""},{"path":"/reference/csv_from_zip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a csv from a zip — csv_from_zip","text":"zip file ingestion chosen readr","code":""},{"path":"/reference/csv_from_zip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a csv from a zip — csv_from_zip","text":"","code":"if (FALSE) { # \\dontrun{ read.csv(csv_from_zip(\"https://files.digital.nhs.uk/assets/ods/current/succarc.zip\")) } # }"},{"path":"/reference/genus_gram_stain.html","id":null,"dir":"Reference","previous_headings":"","what":"Bacterial Genus Gram Stain Lookup Table — genus_gram_stain","title":"Bacterial Genus Gram Stain Lookup Table — genus_gram_stain","text":"reference table bacterial gram stain results genus allow faster filtering bacterial results. dataset maintained manually PHE SGSS database. organisms missing, please raise issue push request epidm GitHub","code":""},{"path":"/reference/genus_gram_stain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bacterial Genus Gram Stain Lookup Table — genus_gram_stain","text":"","code":"genus_gram_stain"},{"path":"/reference/genus_gram_stain.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bacterial Genus Gram Stain Lookup Table — genus_gram_stain","text":"data frame four columns organism_genus bacterial genus gram_stain character string indicate POSITIVE NEGATIVE type gram_positive 0/1 flag indicate genus gram positive gram_negative 0/1 flag indicate genus gram negative","code":""},{"path":"/reference/group_ecds_discharge_destination.html","id":null,"dir":"Reference","previous_headings":"","what":"A&E attendance discharge destination — group_ecds_discharge_destination","title":"A&E attendance discharge destination — group_ecds_discharge_destination","text":"order group &E discharge destination SNOWMED human readable groups, lookup table created. work Emergency Care Dataset (ECDS) data destination_code field show patient goes discharge &E.","code":""},{"path":"/reference/group_ecds_discharge_destination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A&E attendance discharge destination — group_ecds_discharge_destination","text":"","code":"group_ecds_discharge_destination"},{"path":"/reference/group_ecds_discharge_destination.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A&E attendance discharge destination — group_ecds_discharge_destination","text":"code ECDS destination_code destination_code destination grouping human readable string","code":""},{"path":"/reference/group_inpatient_admission_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Inpatient admission methods — group_inpatient_admission_method","title":"Inpatient admission methods — group_inpatient_admission_method","text":"order group hospital inpatient admissions human readable groups, lookup table created. work Hospital Episode Statistics (HES) Secondary Use Services (SUS) data admission_method fields.","code":""},{"path":"/reference/group_inpatient_admission_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inpatient admission methods — group_inpatient_admission_method","text":"","code":"group_inpatient_admission_method"},{"path":"/reference/group_inpatient_admission_method.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Inpatient admission methods — group_inpatient_admission_method","text":"code admission_method code admission_method admission_method grouping human readable string","code":""},{"path":"/reference/group_inpatient_discharge_destination.html","id":null,"dir":"Reference","previous_headings":"","what":"Inpatient discharge destination — group_inpatient_discharge_destination","title":"Inpatient discharge destination — group_inpatient_discharge_destination","text":"order group hospital inpatient discharge destination human readable groups, lookup table created. work Hospital Episode Statistics (HES) Secondary Use Services (SUS) data discharge_destination fields.","code":""},{"path":"/reference/group_inpatient_discharge_destination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inpatient discharge destination — group_inpatient_discharge_destination","text":"","code":"group_inpatient_discharge_destination"},{"path":"/reference/group_inpatient_discharge_destination.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Inpatient discharge destination — group_inpatient_discharge_destination","text":"code discharge_destination code discharge_destination discharge_destination grouping human readable string","code":""},{"path":"/reference/group_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping of intervals or events in time together — group_time","title":"Grouping of intervals or events in time together — group_time","text":"Group across multiple observations overlapping time intervals, defined start end dates, events within static/fixed rolling window time. commonly used inpatient HES/SUS data group spells defined start end dates,  group positive specimen tests, based specimen dates together infection episodes.","code":""},{"path":"/reference/group_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping of intervals or events in time together — group_time","text":"","code":"group_time(   x,   date_start,   date_end,   window,   window_type = c(\"rolling\", \"static\"),   group_vars,   indx_varname = \"indx\",   min_varname = \"date_min\",   max_varname = \"date_max\",   .forceCopy = FALSE )"},{"path":"/reference/group_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping of intervals or events in time together — group_time","text":"x data frame, converted data.table date_start column containing start dates grouping, provided quoted date_end column containing end dates interval, quoted window integer representing time window days applied start date grouping events window_type character, determine 'rolling' 'static' grouping method used grouping events group_vars vector, columns used group records, quoted indx_varname character string set variable name index column provides grouping key; default indx min_varname character string set variable name time period minimum max_varname character string set variable name time period maximum .forceCopy default FALSE; TRUE force data.table take copy instead editing data without reference","code":""},{"path":"/reference/group_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping of intervals or events in time together — group_time","text":"original data.frame data.table following new fields: indx; renamed using indx_varname id field new aggregated events/intervals; note date_start NA, indx value also NA min_date; renamed using min_varname start date aggregated events/intervals max_date; renamed using max_varname end date aggregated events/intervals","code":""},{"path":"/reference/group_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping of intervals or events in time together — group_time","text":"","code":"episode_test <- structure(   list(     pat_id = c(1L, 1L, 1L, 1L, 2L, 2L, 2L,                1L, 1L, 1L, 1L, 2L, 2L, 2L),     species = c(rep(\"E. coli\",7),rep(\"K. pneumonia\",7)),     spec_type = c(rep(\"Blood\",7),rep(\"Blood\",4),rep(\"Sputum\",3)),     sp_date = structure(c(18262, 18263, 18281, 18282, 18262, 18263, 18281,                           18265, 18270, 18281, 18283, 18259, 18260, 18281),                         class = \"Date\")   ),   row.names = c(NA, -14L), class = \"data.frame\")  group_time(x=episode_test,            date_start='sp_date',            window=14,            window_type = 'static',            indx_varname = 'static_indx',            group_vars=c('pat_id','species','spec_type'))[] #>     pat_id      species spec_type    sp_date static_indx #>      <int>       <char>    <char>     <Date>      <char> #>  1:      1      E. coli     Blood 2020-01-01       1.4.1 #>  2:      1      E. coli     Blood 2020-01-02       1.4.1 #>  3:      1      E. coli     Blood 2020-01-20       1.4.2 #>  4:      1      E. coli     Blood 2020-01-21       1.4.2 #>  5:      1 K. pneumonia     Blood 2020-01-04       2.4.1 #>  6:      1 K. pneumonia     Blood 2020-01-09       2.4.1 #>  7:      1 K. pneumonia     Blood 2020-01-20       2.4.2 #>  8:      1 K. pneumonia     Blood 2020-01-22       2.4.2 #>  9:      2      E. coli     Blood 2020-01-01       3.3.1 #> 10:      2      E. coli     Blood 2020-01-02       3.3.1 #> 11:      2      E. coli     Blood 2020-01-20       3.3.2 #> 12:      2 K. pneumonia    Sputum 2019-12-29       4.3.1 #> 13:      2 K. pneumonia    Sputum 2019-12-30       4.3.1 #> 14:      2 K. pneumonia    Sputum 2020-01-20       4.3.2  spell_test <- data.frame(   id = c(rep(99,6),rep(88,4),rep(3,3)),   provider = c(\"YXZ\",rep(\"ZXY\",5),rep(\"XYZ\",4),rep(\"YZX\",3)),   spell_start = as.Date(     c(       \"2020-03-01\",       \"2020-07-07\",       \"2020-02-08\",       \"2020-04-28\",       \"2020-03-15\",       \"2020-07-01\",       \"2020-01-01\",       \"2020-01-12\",       \"2019-12-25\",       \"2020-03-28\",       \"2020-01-01\",       rep(NA,2)     )   ),   spell_end = as.Date(     c(       \"2020-03-10\",       \"2020-07-26\",       \"2020-05-22\",       \"2020-04-30\",       \"2020-05-20\",       \"2020-07-08\",       \"2020-01-23\",       \"2020-03-30\",       \"2020-01-02\",       \"2020-04-20\",       \"2020-01-01\",       rep(NA,2)     )   ) )  group_time(x = spell_test,            date_start = 'spell_start',            date_end = 'spell_end',            group_vars = c('id','provider'),            indx_varname = 'spell_id',            min_varname = 'spell_min_date',            max_varname = 'spell_max_date')[] #>        id provider spell_start  spell_end spell_id spell_min_date #>     <num>   <char>      <Date>     <Date>   <char>         <Date> #>  1:    88      XYZ  2019-12-25 2020-01-02    1.4.0     2019-12-25 #>  2:    88      XYZ  2020-01-01 2020-01-23    1.4.0     2019-12-25 #>  3:     3      YZX  2020-01-01 2020-01-01    2.1.0     2020-01-01 #>  4:    88      XYZ  2020-01-12 2020-03-30    1.4.0     2019-12-25 #>  5:    99      ZXY  2020-02-08 2020-05-22    3.5.0     2020-02-08 #>  6:    99      YXZ  2020-03-01 2020-03-10    4.1.0     2020-03-01 #>  7:    99      ZXY  2020-03-15 2020-05-20    3.5.0     2020-02-08 #>  8:    88      XYZ  2020-03-28 2020-04-20    1.4.0     2019-12-25 #>  9:    99      ZXY  2020-04-28 2020-04-30    3.5.0     2020-02-08 #> 10:    99      ZXY  2020-07-01 2020-07-08    3.5.1     2020-07-01 #> 11:    99      ZXY  2020-07-07 2020-07-26    3.5.1     2020-07-01 #> 12:     3      YZX        <NA>       <NA>     <NA>           <NA> #> 13:     3      YZX        <NA>       <NA>     <NA>           <NA> #>     spell_max_date #>             <Date> #>  1:     2020-04-20 #>  2:     2020-04-20 #>  3:     2020-01-01 #>  4:     2020-04-20 #>  5:     2020-05-22 #>  6:     2020-03-10 #>  7:     2020-05-22 #>  8:     2020-04-20 #>  9:     2020-05-22 #> 10:     2020-07-26 #> 11:     2020-07-26 #> 12:           <NA> #> 13:           <NA>"},{"path":"/reference/hospital_in_out_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Hospital IN/OUT dates — hospital_in_out_dates","title":"Hospital IN/OUT dates — hospital_in_out_dates","text":"function helps determine patient hospital across  spell aggregation. retaining final record following criteria used: \"1\" Current admissions take priority \"2\" conflicting day, inpatient admissions take priority &E emergency care data \"3\" patient linked &E admission hospital inpatient stay, &E admission date used \"4\" patient positive test two hospital stays recent completed hospital stay prior test retained except time events greater 14 days, first admission following test retained","code":""},{"path":"/reference/hospital_in_out_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hospital IN/OUT dates — hospital_in_out_dates","text":"","code":"hospital_in_out_dates(   data,   person_id = \"id\",   hospital = list(org_code = \"organisation_code_of_provider\", event_date = \"ev_date\",     ae_arrive = \"arrival_date\", ae_depart = \"departure_date\", ae_discharge =     \"ecds_discharge\", in_spell_start = \"spell_start_date\", in_spell_end =     \"spell_end_date\", in_discharge = \"discharge_destination\") )"},{"path":"/reference/hospital_in_out_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hospital IN/OUT dates — hospital_in_out_dates","text":"data linked asset holding &E Inpatient data person_id column containing unique patient ID hospital list containing following items org_code NHS trust organisation codes event_date comparison date used; often specimen_date ae_arrive ECDS arrival date ae_depart ECDS discharge date ae_discharge ECDS discharge status; recommend grouping epidm::lookup_recode in_spell_start HES/SUS spell start date; recommend epidm::group_time in_spell_end HES/SUS spell end date; recommend epidm::group_time in_discharge HES/SUS discharge destination code; recommend grouping epidm::lookup_recode","code":""},{"path":"/reference/hospital_in_out_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hospital IN/OUT dates — hospital_in_out_dates","text":"new date columns data.table hospital_in hospital_out hospital_event_rank","code":""},{"path":[]},{"path":"/reference/hospital_in_out_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hospital IN/OUT dates — hospital_in_out_dates","text":"","code":"if (FALSE) { # \\dontrun{ hospital_in_out_dates(link, person_id = 'id', hospital = list(   org_code = 'organisation_code_of_provider',   event_date = 'ev_date',   ae_arrive = 'arrival_date',   ae_depart = 'departure_date',   ae_discharge = 'ecds_discharge',   in_spell_start = 'spell_start_date',   in_spell_end = 'spell_end_date',   in_discharge = 'discharge_destination' ))[] } # }"},{"path":"/reference/inpatient_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Inpatient Codes cleanup — inpatient_codes","title":"Inpatient Codes cleanup — inpatient_codes","text":"HES/SUS ICD/OPCS codes provided wide format may want clean long easier analysis. function helps reshaping long separate table. Ensuring separate allows retain source data, aggregate appropriately later.","code":""},{"path":"/reference/inpatient_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inpatient Codes cleanup — inpatient_codes","text":"","code":"inpatient_codes(   x,   field_strings,   patient_id_vars,   type = c(\"icd9\", \"icd10\", \"opcs\"),   .forceCopy = FALSE )"},{"path":"/reference/inpatient_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inpatient Codes cleanup — inpatient_codes","text":"x data.frame data.table containing inpatient data field_strings vector string containing regex columns patient_id_vars vector containing colnames used identify patient episode spell type string denote codes diagnostic procedural .forceCopy default FALSE; TRUE force data.table take copy instead editing data without reference","code":""},{"path":"/reference/inpatient_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inpatient Codes cleanup — inpatient_codes","text":"separate table codes id long form","code":""},{"path":"/reference/inpatient_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inpatient Codes cleanup — inpatient_codes","text":"","code":"inpatient_test <- data.frame( id = c(1053L,5487L,8180L,528L,1085L,344L,2021L,2040L,        6504L,10867L,12411L,7917L,2950L,2812L,7757L,12227L,2675L,        8548L,536L,11830L,12708L,10421L,5503L,2494L,14001L), spell_id = c(\"dwPDw\",\"iSpUq\",\"qpgk5\",\"8vrJ1\",\"BAur9\",\"l6LZk\",              \"KJllb\",\"tgZID\",\"fJkh8\",\"Y9IPv\",\"DAlUZ\",              \"9Ooc4\",\"hUxGn\",\"wtMG9\",\"dw3dO\",\"cz3fI\",              \"gdxZK\",\"npplb\",\"tynBh\",\"Uu0Sd\",\"gV1Ac\",              \"vOpA1\",\"ttlcD\",\"Fqo29\",\"ivTmN\"), primary_diagnosis_code = c(\"K602\",\"U071-\",\"I501\",\"U071  \",\"J22X\",\"J189\",                            \"J189\",\"I951\",\"N130\",\"U071\",\"K510 D\",NA,                            \"G409-\",\"C780\",\"N185\",\"J955\",\"K573\",\"U071\",                            \"I330\",\"L309\",\"M513\",\"U071\",\"A419\",\"U071\",                            \"N185-\"), secondary_diagnosis_code_1 = c(\"K641\",\"J128-\",\"I489\",\"J128  \",\"Q348\",\"F059\",                                \"R296\",\"R296\",\"N131\",\"J128\",\"M0750A\",NA,                                \"R401-\",\"C782\",\"Z491\",\"C321\",\"D125\",\"J128\",                                \"B952\",\"J459\",\"M4780\",\"B972\",\"N390\",\"J128\",                                \"Z491-\"), secondary_diagnosis_code_2 = c(\"E039\",\"B972-\",\"I10X\",\"L031  \",\"Z115\",\"I509\",                                \"F051\",\"I251\",\"K862\",\"B972\",\"K590-\",NA,                                \"E876-\",\"C798\",\"N085\",\"Z938\",\"I209\",\"B972\",                                \"I214\",\"Z880\",\"M8588\",\"R296\",\"B962\",\"B972\",                                NA), secondary_diagnosis_code_3 = c(\"I422\",\"J9691\",\"E119\",\"I489  \",\"D509\",\"I489\",                                \"D509\",\"I252\",\"T391\",\"J440\",\"R21X-\",NA,                                \"R945-\",\"E119\",\"M310\",\"I480\",\"I252\",\"J9690\",                                \"E111\",NA,\"Z115\",\"R410\",\"J181\",\"Z518\",NA), secondary_diagnosis_code_4 = c(NA,\"I10X-\",\"E669\",\"E109  \",\"K219\",\"Z921\",\"I251\",                                \"I259\",\"R458\",\"B972\",\"F200-\",NA,\"E039-\",                                \"I10X\",NA,\"I500\",\"F171\",\"I489\",\"E162\",NA,                                \"I480\",\"M2551\",\"L892\",\"E86X\",NA), secondary_diagnosis_code_5 = c(NA,\"E119-\",\"J449\",\"F03X  \",NA,\"Z518\",\"I252\",                                \"I209\",\"C61X\",\"A419\",\"R761-\",NA,\"E119-\",                                \"K219\",NA,\"Z115\",\"F329\",\"N179\",\"N179\",NA,                                \"H353\",\"Z638\",\"L033\",\"R54X\",NA), secondary_diagnosis_code_6 = c(NA,NA,\"Z966\",\"I10X  \",NA,\"N179\",\"N183\",\"Z115\",                                \"K627\",\"N390\",NA,NA,\"J459-\",\"M4780\",NA,                                \"Z900\",NA,\"I10X\",\"R34X\",NA,\"I951\",\"I10X\",                                \"D510\",\"F059\",NA), secondary_diagnosis_code_7 = c(NA,NA,\"Z854\",\"I679  \",NA,\"N183\",\"Z951\",\"M190\",                                \"R634\",\"L031\",NA,NA,\"I10X-\",\"M512\",NA,                                \"Z921\",NA,\"E119\",\"I959\",NA,\"H903\",\"I678\",                                \"K639\",\"F03X\",NA), secondary_diagnosis_code_8 = c(NA,NA,\"Z864\",\"J459  \",NA,\"E115\",\"E119\",\"N183\",                                \"E111\",\"E871\",NA,NA,\"R51X-\",\"H409\",NA,                                \"Z870\",NA,NA,\"J90X\",NA,\"M199\",\"J459\",                                \"N133\",\"F29X\",NA), secondary_diagnosis_code_9 = c(NA,NA,\"Z921\",\"R296  \",NA,\"L97X\",\"I10X\",\"M4806\",                                \"E114\",\"S099\",NA,NA,\"Q070-\",\"H544\",NA,                                NA,NA,NA,\"I501\",NA,\"K811\",\"F03X\",\"J90X\",                                \"N189\",NA), secondary_diagnosis_code_10 = c(NA,NA,NA,\"Z921  \",NA,\"L089\",\"Z921\",\"N40X\",                                 \"G590\",\"R296\",NA,NA,\"E668-\",\"Z858\",NA,NA,NA,                                 NA,\"I489\",NA,\"K219\",\"G20X\",\"N202\",                                 \"F719\",NA), secondary_diagnosis_code_11 = c(NA,NA,NA,\"Z515  \",NA,\"R02X\",\"Z507\",\"Z864\",                                 \"E162\",\"I489\",NA,NA,\"G473-\",\"Z923\",NA,NA,NA,                                 NA,\"I447\",NA,\"J459\",\"E119\",\"L031\",                                 \"Z960\",NA), secondary_diagnosis_code_12 = c(NA,NA,NA,\"Z501  \",NA,\"B370\",\"K579\",\"Z955\",                                 \"E46X\",\"Z921\",NA,NA,\"R600-\",\"Z926\",NA,NA,NA,                                 NA,\"E86X\",NA,\"I10X\",NA,\"J981\",\"Z922\",                                 NA), secondary_diagnosis_code_13 = c(NA,NA,NA,\"Z507  \",NA,\"E039\",\"M109\",NA,\"I259\",                                 \"K709\",NA,NA,\"M1999\",\"Z895\",NA,NA,NA,NA,                                 \"R33X\",NA,\"J40X\",NA,\"E119\",NA,NA), secondary_diagnosis_code_14 = c(NA,NA,NA,NA,NA,NA,\"J459\",NA,\"N131\",\"Z864\",NA,                                 NA,\"R468-\",\"Z902\",NA,NA,NA,NA,\"R296\",                                 NA,NA,NA,\"I739\",NA,NA), secondary_diagnosis_code_15 = c(NA,NA,NA,NA,NA,NA,\"Z880\",NA,\"K862\",\"Z501\",NA,                                 NA,\"Z115-\",\"Z971\",NA,NA,NA,NA,\"R468\",                                 NA,NA,NA,\"N183\",NA,NA), secondary_diagnosis_code_16 = c(NA,NA,NA,NA,NA,NA,\"Z867\",NA,\"T391\",\"Z505\",NA,                                 NA,\"Z501-\",\"Z878\",NA,NA,NA,NA,\"R31X\",                                 NA,NA,NA,\"I489\",NA,NA), secondary_diagnosis_code_17 = c(NA,NA,NA,NA,NA,NA,\"Z864\",NA,\"R458\",\"Z518\",NA,                                 NA,\"Z507-\",\"Z958\",NA,NA,NA,NA,\"Z115\",                                 NA,NA,NA,\"M549\",NA,NA), secondary_diagnosis_code_18 = c(NA,NA,NA,NA,NA,NA,\"F03X\",NA,\"C61X\",NA,NA,NA,                                 NA,\"Z867\",NA,NA,NA,NA,\"I252\",NA,NA,                                 NA,\"I252\",NA,NA), secondary_diagnosis_code_19 = c(NA,NA,NA,NA,NA,NA,NA,NA,\"K627\",NA,NA,NA,NA,                                 \"Z864\",NA,NA,NA,NA,\"I259\",NA,NA,NA,                                 \"I259\",NA,NA), secondary_diagnosis_code_20 = c(NA,NA,NA,NA,NA,NA,NA,NA,\"R634\",NA,NA,NA,NA,                                 \"Z880\",NA,NA,NA,NA,\"I10X\",NA,NA,NA,                                 \"E669\",NA,NA), secondary_diagnosis_code_21 = c(NA,NA,NA,NA,NA,NA,NA,NA,\"E111\",NA,NA,NA,NA,                                 \"Z800\",NA,NA,NA,NA,\"I352\",NA,NA,NA,                                 \"Z867\",NA,NA), secondary_diagnosis_code_22 = c(NA,NA,NA,NA,NA,NA,NA,NA,\"E114\",NA,NA,NA,NA,                                 \"Z801\",NA,NA,NA,NA,\"R15X\",NA,NA,NA,                                 \"Z896\",NA,NA), secondary_diagnosis_code_23 = c(NA,NA,NA,NA,NA,NA,NA,NA,\"G590\",NA,NA,NA,NA,                                 NA,NA,NA,NA,NA,\"R32X\",NA,NA,NA,                                 \"Z960\",NA,NA), secondary_diagnosis_code_24 = c(NA,NA,NA,NA,NA,NA,NA,NA,\"E162\",NA,NA,NA,NA,                                 NA,NA,NA,NA,NA,\"R418\",NA,NA,NA,                                 \"Z874\",NA,NA), primary_procedure_code = c(\"H289\",NA,\"K634\",NA,\"X292\",NA,NA,NA,NA,NA,                            \"H251\",NA,\"U051\",\"L913\",\"X403\",NA,\"H231\",                            \"U071\",\"M473\",\"X384\",NA,NA,NA,NA,\"X403\"), primary_procedure_date = c(\"20170730\",NA,\"20201202\",NA,\"20170914\",NA,NA,NA,                            NA,NA,\"20210105\",NA,\"20170724\",                            \"20210111\",\"20171114\",NA,\"20170622\",\"20210104\",                            \"20171013\",\"20170313\",NA,NA,NA,NA,                            \"20171107\"), secondary_procedure_code_1 = c(\"H626\",NA,\"Y534\",NA,\"U297\",NA,NA,NA,NA,NA,                                \"Z286\",NA,\"Y981\",\"Y031\",NA,NA,\"Z286\",                                \"Y981\",NA,NA,NA,NA,NA,NA,NA), secondary_procedure_date_1 = c(\"20170730\",NA,\"20201202\",NA,\"20170928\",NA,NA,NA,                                NA,NA,\"20210105\",NA,\"20170724\",                                \"20210111\",NA,NA,\"20170622\",\"20210104\",NA,NA,NA,                                NA,NA,NA,NA), secondary_procedure_code_2 = c(\"H444\",NA,\"Z941\",NA,NA,NA,NA,NA,NA,NA,NA,NA,                                \"U212\",NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA,NA,NA), secondary_procedure_date_2 = c(\"20170730\",NA,\"20201202\",NA,NA,NA,NA,NA,NA,NA,                                NA,NA,\"20170729\",NA,NA,NA,NA,NA,NA,                                NA,NA,NA,NA,NA,NA), secondary_procedure_code_3 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,\"Y973\",                                NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA), secondary_procedure_date_3 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                \"20170729\",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA,NA), secondary_procedure_code_4 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,\"Y982\",                                NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA), secondary_procedure_date_4 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                \"20170729\",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA,NA), secondary_procedure_code_5 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,\"Z926\",                                NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA), secondary_procedure_date_5 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                \"20170729\",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA,NA), secondary_procedure_code_6 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,\"O161\",                                NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA), secondary_procedure_date_6 = c(NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                \"20170729\",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA,NA) )  inpatient_codes(x=inpatient_test,                 field_strings='diagnosis',                 patient_id_vars = c('id','spell_id'),                 type = 'icd10') #>         id spell_id                       order  icd10 order_n #>      <int>   <char>                      <char> <char>   <int> #>   1:   344    l6LZk      primary_diagnosis_code   J189       1 #>   2:   344    l6LZk  secondary_diagnosis_code_1   F059       2 #>   3:   344    l6LZk  secondary_diagnosis_code_2   I509       3 #>   4:   344    l6LZk  secondary_diagnosis_code_3   I489       4 #>   5:   344    l6LZk  secondary_diagnosis_code_4   Z921       5 #>  ---                                                           #> 280: 12708    gV1Ac secondary_diagnosis_code_11   J459      12 #> 281: 12708    gV1Ac secondary_diagnosis_code_12   I10X      13 #> 282: 12708    gV1Ac secondary_diagnosis_code_13   J40X      14 #> 283: 14001    ivTmN      primary_diagnosis_code   N185       1 #> 284: 14001    ivTmN  secondary_diagnosis_code_1   Z491       2  inpatient_codes(x=inpatient_test,                 field_strings=c('procedure_code','procedure_date'),                 patient_id_vars = c('id','spell_id'),                 type = 'opcs') #>        id spell_id order_n   opcs     date #>     <int>   <char>  <char> <char>   <char> #>  1:   536    tynBh       1   M473 20171013 #>  2:  1053    dwPDw       1   H289 20170730 #>  3:  1053    dwPDw       2   H626 20170730 #>  4:  1053    dwPDw       3   H444 20170730 #>  5:  1085    BAur9       1   X292 20170914 #>  6:  1085    BAur9       2   U297 20170928 #>  7:  2675    gdxZK       1   H231 20170622 #>  8:  2675    gdxZK       2   Z286 20170622 #>  9:  2812    wtMG9       1   L913 20210111 #> 10:  2812    wtMG9       2   Y031 20210111 #> 11:  2950    hUxGn       1   U051 20170724 #> 12:  2950    hUxGn       2   Y981 20170724 #> 13:  2950    hUxGn       3   U212 20170729 #> 14:  2950    hUxGn       4   Y973 20170729 #> 15:  2950    hUxGn       5   Y982 20170729 #> 16:  2950    hUxGn       6   Z926 20170729 #> 17:  2950    hUxGn       7   O161 20170729 #> 18:  7757    dw3dO       1   X403 20171114 #> 19:  8180    qpgk5       1   K634 20201202 #> 20:  8180    qpgk5       2   Y534 20201202 #> 21:  8180    qpgk5       3   Z941 20201202 #> 22:  8548    npplb       1   U071 20210104 #> 23:  8548    npplb       2   Y981 20210104 #> 24: 11830    Uu0Sd       1   X384 20170313 #> 25: 12411    DAlUZ       1   H251 20210105 #> 26: 12411    DAlUZ       2   Z286 20210105 #> 27: 14001    ivTmN       1   X403 20171107 #>        id spell_id order_n   opcs     date"},{"path":"/reference/lab_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic Lab Data for epidm — lab_data","title":"Synthetic Lab Data for epidm — lab_data","text":"dataset containing synthetic lab data testing epidemiological data transformation functions.","code":""},{"path":"/reference/lab_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic Lab Data for epidm — lab_data","text":"","code":"data(lab_data)"},{"path":"/reference/lab_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic Lab Data for epidm — lab_data","text":"data frame following columns: nhs_number NHS number local_patient_identifier Patient identifier hospital number patient_birth_date Date birth patients. sex Gender patients (Factor levels: \"Female\", \"Male\"). surname Patient surname forename Patient forename organism_species_name Organism species name (Factor levels: \"KLEBSIELLA PNEUMONIAE\"). specimen_date Date specimen collection. specimen_type Type specimen: BLOOD URINE. lab_code Laboratory codes (Factor unique levels). local_authority_name Name local authority. local_authority_code Code local authority.","code":""},{"path":"/reference/lab_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthetic Lab Data for epidm — lab_data","text":"","code":"data(lab_data) head(lab_data) #>   nhs_number local_patient_identifier patient_birth_date    sex    surname #> 1  576322970                  IG12067         1938-10-05 Female   WILLIAMS #> 2  325999719                  XB29898         1957-04-04   Male EL-SHAHEED #> 3  705649596                   KR2535         1927-06-24   Male     LINTON #> 4  115685428                  HS45202         1962-06-14   Male       RODA #> 5  127656016                  CF95132         1953-07-20   Male    EL-AMEN #> 6  446577858                  WL71545         1948-06-02   Male       PHAM #>   forename organism_species_name specimen_date specimen_type lab_code #> 1 JAMILETH KLEBSIELLA PNEUMONIAE    2020-05-24         BLOOD  BI20985 #> 2   ZAAHIR KLEBSIELLA PNEUMONIAE    2023-07-08         BLOOD  JH70033 #> 3  KASHIEF STAPHYLOCOCCUS AUREUS    2023-02-24         BLOOD   CU5997 #> 4    TYLER STAPHYLOCOCCUS AUREUS    2023-08-26         BLOOD   ES3851 #> 5  CHARLIE STAPHYLOCOCCUS AUREUS    2022-04-07         BLOOD  YA29556 #> 6  MALCOLM KLEBSIELLA PNEUMONIAE    2022-04-18  URINE/KIDNEY  YK19355 #>        local_authority_name local_authority_code #> 1                  Worthing            E07000229 #> 2                   Reading            E06000038 #> 3                  Plymouth            E06000026 #> 4 Cheshire West and Chester            E06000050 #> 5            Northumberland            E06000057 #> 6                    Camden            E09000007"},{"path":"/reference/link_ae_inpatient.html","id":null,"dir":"Reference","previous_headings":"","what":"Link A&E to Inpatient records — link_ae_inpatient","title":"Link A&E to Inpatient records — link_ae_inpatient","text":"Link together ECDS &E records HES/SUS inpatient records NHS number, Hospital Number Date Birth organisation code. note inpatient records already aggregated spells desired level (standard, CIP Mega)","code":""},{"path":"/reference/link_ae_inpatient.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link A&E to Inpatient records — link_ae_inpatient","text":"","code":"link_ae_inpatient(   ae = list(data, record_id = \"unique_record_id\", nhs_number = \"nhs_number\",     hospital_number = \"local_patient_identifier\", patient_dob = \"patient_birth_date\",     org_code = \"organisation_code_of_provider\", arrival_date = \"arrival_date\",     departure_date = \"departure_date\"),   inp = list(data, record_id = \"unique_record_id\", nhs_number = \"nhs_number\",     hospital_number = \"local_patient_identifier\", patient_dob = \"date_birth\", org_code =     \"organisation_code_code_of_provider\", spell_id = \"mega_spell_id\", spell_start_date =     \"spell_start_date\"),   .forceCopy = FALSE )"},{"path":"/reference/link_ae_inpatient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link A&E to Inpatient records — link_ae_inpatient","text":"ae list provide data columns &E (ECDS) data; arguments provided quoted unless specified data ECDS &E dataset provided unquoted record_id unique id within dataset retained; optional arrival_date ECDS arrival date departure_date ECDS discharge date nhs_number patient NHS number hospital_number patient Hospital numbers also known local patient identifier patient_dob patient date birth org_code NHS trust organisation codes inp list provide data columns inpatient (SUS/HES) data data HES/SUS inpatient dataset provided unquoted record_id unique id within dataset retained; optional spell_start_date string containing inpatient (SUS/HES) admission date column name; arguments provided quoted unless specified spell_id HES/SUS spell id nhs_number patient NHS number hospital_number patient Hospital numbers also known local patient identifier patient_dob patient date birth org_code NHS trust organisation codes .forceCopy boolean control want copy dataset linking together","code":""},{"path":"/reference/link_ae_inpatient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Link A&E to Inpatient records — link_ae_inpatient","text":"patient level linked hospital record","code":""},{"path":[]},{"path":"/reference/link_ae_inpatient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Link A&E to Inpatient records — link_ae_inpatient","text":"","code":"if (FALSE) { # \\dontrun{ sample_ae <- data.table::data.table(   nhs_number = c(\"645114517\",                  \"645114517\",\"645114517\",\"382940103\",\"321908341\",                  \"321908341\",\"321908341\",\"599534707\",                  \"403454211\",\"349959089\",\"252341591\",\"180554160\",                  \"180554160\",\"281980720\",\"473372796\",\"369773534\",                  \"474044124\",\"639064842\",\"662468568\",\"115641745\",                  \"115641745\",\"821084975\",\"479637024\",                  \"527021626\",\"527021626\",\"233168855\",\"702650869\",NA,                  \"537235036\",NA,\"517229961\",NA,\"480142132\",                  \"368288558\",\"554675340\"),   local_patient_identifier = c(NA,NA,NA,                                \"I3348707\",NA,NA,NA,\"P1350948\",NA,NA,                                \"Q4157514\",NA,NA,\"D1101843\",\"K2440769\",\"E1366499\",                                NA,\"K1494229\",\"R4678220\",\"J5206297\",\"J5206297\",                                \"S1945338\",\"F2159102\",NA,NA,\"D6300794\",NA,                                \"W1208900\",\"Z4975449\",\"G7439612\",\"T1266485\",                                \"N4842033\",\"Q5566884\",\"P2689566\",NA),   patient_birth_date = c(\"2021-03-03\",                          \"2021-03-03\",\"2021-03-03\",\"2003-08-24\",                          \"2001-06-21\",\"2001-06-21\",\"2001-06-21\",\"1991-10-08\",                          \"1987-02-03\",\"1962-06-17\",\"1991-10-07\",                          \"1985-10-16\",\"1985-10-16\",\"1990-09-24\",\"1984-11-14\",                          \"1994-05-05\",\"1999-08-11\",\"1983-01-04\",                          \"2017-06-01\",\"1975-09-04\",\"1975-09-04\",\"1993-07-13\",                          \"2014-01-05\",\"1995-09-30\",\"1995-09-30\",                          \"1976-06-25\",\"2000-06-02\",\"2017-06-11\",\"2007-05-03\",                          \"1986-08-28\",\"2016-10-14\",\"2016-02-04\",                          \"2004-03-02\",\"1979-01-17\",\"1974-06-14\"),   organisation_code = c(\"P3P\",\"P3P\",                         \"P3P\",\"Z4R\",\"A9I\",\"A9I\",\"A9I\",\"Z4R\",\"V5T\",                         \"Z9V\",\"P3P\",\"T7N\",\"T7N\",\"V2P\",\"T4H\",\"V9Y\",                         \"Z7N\",\"W6Y\",\"G2H\",\"V5T\",\"V5T\",\"W6Y\",\"J6J\",                         \"J6J\",\"J6J\",\"L4Q\",\"P3P\",\"F0N\",\"A6C\",\"O1A\",                         \"F0N\",\"O2R\",\"W6Y\",\"V0R\",\"O1A\"),   arrival_date = c(\"2022-05-10\",                    \"2022-05-29\",\"2022-08-03\",\"2022-05-17\",                    \"2022-05-07\",\"2022-05-07\",\"2022-05-07\",\"2022-05-23\",                    \"2022-05-13\",\"2022-06-04\",\"2022-05-14\",                    \"2022-05-17\",\"2022-06-05\",\"2022-05-25\",\"2022-05-24\",                    \"2022-06-09\",\"2022-06-18\",\"2022-06-11\",                    \"2022-06-22\",\"2022-06-20\",\"2022-07-18\",\"2022-06-09\",                    \"2022-06-05\",\"2022-06-26\",\"2022-06-11\",                    \"2022-06-25\",\"2022-06-10\",\"2022-06-12\",\"2022-06-16\",                    \"2022-07-10\",\"2022-06-20\",\"2022-07-10\",                    \"2022-07-20\",\"2022-07-20\",\"2022-07-19\"),   departure_date = c(\"2022-05-10\",                      \"2022-05-30\",\"2022-08-03\",\"2022-05-17\",                      \"2022-05-07\",\"2022-05-07\",\"2022-05-07\",\"2022-05-23\",                      \"2022-05-13\",\"2022-06-04\",\"2022-05-14\",                      \"2022-05-17\",\"2022-06-05\",\"2022-05-25\",\"2022-05-24\",                      \"2022-06-09\",\"2022-06-18\",\"2022-06-11\",                      \"2022-06-22\",\"2022-06-20\",\"2022-07-18\",\"2022-06-09\",                      \"2022-06-05\",\"2022-06-26\",\"2022-06-11\",                      \"2022-06-25\",\"2022-06-10\",\"2022-06-12\",\"2022-06-16\",                      \"2022-07-11\",\"2022-06-20\",\"2022-07-10\",                      \"2022-07-20\",\"2022-07-20\",\"2022-07-19\") ) sample_ae$pcd <- paste0(sample(LETTERS,1),sample(1:14,1),\" \",                         sample(LETTERS,1),sample(0:9,1),sample(LETTERS,1)) sample_ae$id = seq_len(nrow(sample_ae))*7  sample_inp <- data.table::data.table(   nhs_number = c(\"335661151\",                  \"335661151\",\"335661151\",\"335661151\",\"335661151\",                  NA,NA,NA,NA,NA,NA,\"645114517\",\"645114517\",                  \"645114517\",\"143423716\",\"212261130\",                  \"212261130\",\"212261130\",\"212261130\",\"212261130\",                  \"349959089\",\"317344169\",\"317344169\",\"317344169\",                  \"317344169\",\"317344169\",\"317344169\",\"317344169\",                  \"317344169\",\"317344169\",\"317344169\",                  \"317344169\",\"317344169\",\"317344169\",\"180554160\",                  \"180554160\",NA,NA,NA,NA,NA,NA,NA,\"230782291\",                  \"977111015\",\"977111015\",\"977111015\",\"977111015\",                  \"683785606\",NA,NA,NA,NA,NA,NA,NA,NA,NA,                  NA,NA,\"281980720\",\"270646497\",NA,                  \"387252583\",\"639064842\",\"836297039\",\"836297039\",                  \"348614531\",\"348614531\",\"662468568\",\"112340924\",                  \"112340924\",\"381361439\",\"493239044\",NA,NA,NA,                  \"115641745\",\"115641745\",\"233761482\",\"233761482\",                  \"479637024\",\"527021626\",\"527021626\",                  \"294666415\",\"233168855\",\"702650869\",\"460180094\",                  \"561169746\",\"517229961\",NA,\"480142132\",\"554675340\",                  \"135888675\",NA,\"684718902\"),   local_patient_identifier = c(NA,NA,NA,NA,                                NA,\"D4809270\",\"D4809270\",\"D4809270\",                                \"D4809270\",\"D4809270\",\"D4809270\",NA,NA,NA,                                \"J2098200\",\"D2139084\",\"D2139084\",\"D2139084\",\"D2139084\",                                \"D2139084\",NA,NA,NA,NA,NA,NA,NA,NA,NA,                                NA,NA,NA,NA,NA,NA,NA,\"A1706089\",                                \"A1706089\",\"A1706089\",\"A1706089\",\"A1706089\",                                \"A1706089\",\"A1706089\",\"Z3093435\",\"I1605735\",\"I1888797\",                                \"I1888797\",\"I1888797\",\"J2901593\",\"U1111563\",                                \"U1111563\",\"U1111563\",\"U1111563\",\"V2246708\",                                \"V2246708\",\"V2246708\",\"V2246708\",\"V2246708\",                                \"V2246708\",\"V2246708\",\"D1101843\",NA,\"O2700100\",                                \"I5040881\",\"K1494229\",\"I1222012\",\"I1222012\",                                NA,NA,\"R4678220\",\"P2632883\",\"P2632883\",                                \"J6723431\",\"Y1506318\",\"F3501197\",\"F3501197\",                                \"F3501197\",\"J5206297\",\"J5206297\",\"B2651449\",                                \"B2651449\",\"F2159102\",NA,NA,\"W5097806\",\"D6300794\",                                NA,\"U2715517\",\"O5278248\",\"T1266485\",                                \"N4842033\",\"Q5566884\",NA,\"X2768295\",\"H3196212\",                                \"J9365439\"),   date_birth = c(\"2021-08-14\",                          \"2021-08-14\",\"2021-08-14\",\"2021-08-14\",                          \"2021-08-14\",\"1960-05-20\",\"1960-05-20\",\"1960-05-20\",                          \"1960-05-20\",\"1960-05-20\",\"1960-05-20\",                          \"2021-03-03\",\"2021-03-03\",\"2021-03-03\",\"2019-11-09\",                          \"1953-04-05\",\"1953-04-05\",\"1953-04-05\",                          \"1953-04-05\",\"1953-04-05\",\"1962-06-17\",\"1952-04-03\",                          \"1952-04-03\",\"1952-04-03\",\"1952-04-03\",                          \"1952-04-03\",\"1952-04-03\",\"1952-04-03\",\"1952-04-03\",                          \"1952-04-03\",\"1952-04-03\",\"1952-04-03\",                          \"1952-04-03\",\"1952-04-03\",\"1985-10-16\",\"1985-10-16\",                          \"1993-07-09\",\"1993-07-09\",\"1993-07-09\",                          \"1993-07-09\",\"1993-07-09\",\"1993-07-09\",\"1993-07-09\",                          \"1980-10-14\",\"1976-08-03\",\"1976-08-03\",                          \"1976-08-03\",\"1976-08-03\",\"1981-08-27\",\"2017-08-20\",                          \"2017-08-20\",\"2017-08-20\",\"2017-08-20\",                          \"2017-08-20\",\"2017-08-20\",\"2017-08-20\",\"2017-08-20\",                          \"2017-08-20\",\"2017-08-20\",\"2017-08-20\",                          \"1989-07-11\",\"1964-04-30\",\"1991-12-25\",\"1961-08-16\",                          \"1983-01-04\",\"1957-01-29\",\"1957-01-29\",                          \"1982-12-05\",\"1982-12-05\",\"2017-06-01\",\"1989-09-21\",                          \"1989-09-21\",\"1986-10-06\",\"1995-03-01\",                          \"1964-04-25\",\"1964-04-25\",\"1964-04-25\",\"1975-09-04\",                          \"1975-09-04\",\"1995-06-17\",\"1995-06-17\",                          \"2014-01-05\",\"1995-09-30\",\"1995-09-30\",\"1993-06-09\",                          \"1976-06-25\",\"2000-06-02\",\"1986-09-14\",                          \"2016-11-19\",\"2016-10-14\",\"2016-02-04\",\"2004-03-02\",                          \"1974-06-14\",\"1945-05-14\",\"2001-09-16\",                          \"1987-08-19\"),   organisation_code = cmega_spell_id = c(\"10.3.0\",                     \"10.3.1\",\"10.3.2\",\"4.2.0\",\"4.2.1\",\"7.12.0\",                     \"7.12.1\",\"7.12.2\",\"7.12.3\",\"7.12.4\",\"7.12.5\",                     \"14.3.0\",\"14.3.1\",\"14.3.2\",\"22.2.1\",\"49.6.0\",                     \"49.6.1\",\"49.6.2\",\"49.6.3\",\"49.6.4\",\"69.1.0\",                     \"76.20.0\",\"76.20.1\",\"76.20.2\",\"76.20.3\",                     \"76.20.4\",\"76.20.5\",\"76.20.6\",\"76.20.7\",\"76.20.8\",                     \"76.20.9\",\"76.20.10\",\"76.20.11\",\"76.20.12\",                     \"77.7.0\",\"77.7.1\",\"79.7.0\",\"79.7.1\",\"79.7.2\",                     \"79.7.3\",\"79.7.4\",\"79.7.5\",\"79.7.6\",\"83.1.0\",                     \"157.1.0\",\"85.5.0\",\"85.5.1\",\"85.5.2\",\"90.1.0\",                     \"167.4.0\",\"167.4.1\",\"167.4.2\",\"167.4.3\",                     \"91.9.0\",\"91.9.1\",\"91.9.2\",\"91.9.3\",\"91.9.4\",                     \"91.9.5\",\"91.9.6\",\"101.2.0\",\"111.5.0\",\"122.1.0\",                     \"151.1.0\",\"154.1.0\",\"161.3.0\",\"161.3.1\",                     \"181.4.0\",\"181.4.1\",\"184.1.0\",\"185.2.0\",\"185.2.1\",                     \"201.1.0\",\"214.1.0\",\"226.3.0\",\"226.3.1\",                     \"226.3.2\",\"247.4.0\",\"247.4.1\",\"266.4.0\",\"266.4.1\",                     \"269.2.0\",\"270.2.0\",\"270.2.1\",\"284.1.0\",                     \"299.2.0\",\"307.1.0\",\"314.3.0\",\"345.1.0\",                     \"400.1.0\",\"419.1.0\",\"430.3.1\",\"494.3.0\",\"498.1.0\",                     \"501.1.0\",\"535.1.0\"),   spell_start_date = c(\"2022-05-20\",                        \"2022-06-14\",\"2022-06-20\",\"2022-05-01\",                        \"2022-05-07\",\"2022-05-16\",\"2022-05-29\",\"2022-05-18\",                        \"2022-05-21\",\"2022-06-27\",\"2022-07-18\",                        \"2022-05-10\",\"2022-05-29\",\"2022-08-03\",\"2022-05-13\",                        \"2022-05-27\",\"2022-05-20\",\"2022-06-09\",                        \"2022-06-27\",\"2022-07-27\",\"2022-06-04\",\"2022-05-21\",                        \"2022-06-18\",\"2022-06-24\",\"2022-07-16\",                        \"2022-07-10\",\"2022-07-17\",\"2022-07-20\",\"2022-07-15\",                        \"2022-07-08\",\"2022-08-01\",\"2022-08-04\",                        \"2022-07-27\",\"2022-07-14\",\"2022-05-17\",\"2022-06-05\",                        \"2022-06-01\",\"2022-06-05\",\"2022-06-09\",                        \"2022-05-23\",\"2022-05-27\",\"2022-06-10\",\"2022-06-12\",                        \"2022-05-29\",\"2022-05-29\",\"2022-06-02\",                        \"2022-05-29\",\"2022-06-15\",\"2022-06-09\",\"2022-06-21\",                        \"2022-05-29\",\"2022-07-18\",\"2022-07-26\",                        \"2022-05-12\",\"2022-06-12\",\"2022-06-11\",\"2022-06-28\",                        \"2022-06-29\",\"2022-06-22\",\"2022-07-09\",                        \"2022-05-19\",\"2022-05-25\",\"2022-05-18\",\"2022-05-26\",                        \"2022-06-11\",\"2022-06-21\",\"2022-06-13\",                        \"2022-05-27\",\"2022-06-27\",\"2022-06-22\",\"2022-06-08\",                        \"2022-07-04\",\"2022-06-26\",\"2022-06-26\",                        \"2022-06-11\",\"2022-06-17\",\"2022-07-13\",\"2022-06-20\",                        \"2022-07-18\",\"2022-06-15\",\"2022-07-03\",                        \"2022-06-05\",\"2022-06-26\",\"2022-06-11\",\"2022-06-24\",                        \"2022-06-25\",\"2022-06-10\",\"2022-07-01\",                        \"2022-07-04\",\"2022-06-20\",\"2022-07-10\",\"2022-07-20\",                        \"2022-07-19\",\"2022-07-28\",\"2022-07-27\",                        \"2022-07-10\"),   spell_end_date = c(\"2022-06-17\",                      \"2022-06-16\",\"2022-06-20\",\"2022-05-01\",                      \"2022-05-11\",\"2022-05-16\",\"2022-05-29\",\"2022-05-18\",                      \"2022-05-21\",\"2022-07-05\",\"2022-07-18\",                      \"2022-05-11\",\"2022-06-01\",\"2022-08-04\",\"2022-05-13\",                      \"2022-05-29\",\"2022-05-21\",\"2022-06-10\",                      \"2022-06-30\",\"2022-07-28\",\"2022-06-05\",\"2022-06-25\",                      \"2022-06-18\",\"2022-06-24\",\"2022-07-16\",                      \"2022-07-10\",\"2022-07-17\",\"2022-07-20\",\"2022-07-15\",                      \"2022-07-08\",\"2022-08-01\",\"2022-08-04\",                      \"2022-07-27\",\"2022-07-14\",\"2022-05-30\",\"2022-06-10\",                      \"2022-06-01\",\"2022-06-05\",\"2022-06-09\",                      \"2022-05-23\",\"2022-05-27\",\"2022-06-10\",\"2022-06-12\",                      \"2022-05-30\",\"2022-06-05\",\"2022-06-02\",                      \"2022-06-01\",\"2022-06-15\",\"2022-06-15\",\"2022-06-21\",                      \"2022-05-29\",\"2022-07-18\",\"2022-07-26\",                      \"2022-05-15\",\"2022-06-12\",\"2022-06-17\",\"2022-06-28\",                      \"2022-06-29\",\"2022-06-23\",\"2022-07-11\",                      \"2022-05-19\",\"2022-06-09\",\"2022-05-23\",\"2022-05-26\",                      \"2022-06-20\",\"2022-06-21\",\"2022-06-14\",                      \"2022-06-02\",\"2022-06-27\",\"2022-06-23\",\"2022-06-08\",                      \"2022-07-04\",\"2022-06-26\",\"2022-06-28\",                      \"2022-06-11\",\"2022-06-17\",\"2022-07-13\",\"2022-06-21\",                      \"2022-07-20\",\"2022-06-18\",\"2022-07-03\",                      \"2022-06-11\",\"2022-06-26\",\"2022-06-11\",\"2022-06-24\",                      \"2022-07-01\",\"2022-06-10\",\"2022-07-06\",                      \"2022-07-06\",\"2022-06-23\",\"2022-07-11\",\"2022-07-22\",                      \"2022-07-22\",\"2022-07-28\",\"2022-07-27\",                      \"2022-07-10\") )  sample_inp$pcd <- paste0(sample(LETTERS,1),sample(1:14,1),\" \",                          sample(LETTERS,1),sample(0:9,1),sample(LETTERS,1)) sample_inp$id = seq_len(nrow(sample_inp))*3  link_ae_inpatient(   ae = list(     data = sample_ae,     arrival_date = 'arrival_date',     departure_date = 'departure_date',     nhs_number = 'nhs_number',     hospital_number = 'local_patient_identifier',     patient_dob = 'patient_birth_date',     org_code = 'organisation_code'   ),   inp = list(     data = sample_inp,     spell_id = 'mega_spell_id',     spell_start_date = 'spell_start_date',     nhs_number = 'nhs_number',     hospital_number = 'local_patient_identifier',     patient_dob = 'date_birth',     org_code = 'organisation_code'   ) )[] } # }"},{"path":"/reference/lookup_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup table switch handler — lookup_recode","title":"Lookup table switch handler — lookup_recode","text":"function call epidm lookup table recode  aware new value. Built  organism re-classifications specimen_type groupings manual mode.","code":""},{"path":"/reference/lookup_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup table switch handler — lookup_recode","text":"","code":"lookup_recode(   src,   type = c(\"species\", \"specimen\", \"inpatient_admission_method\",     \"inpatient_discharge_destination\", \"ecds_destination_code\", \"manual\"),   .import = NULL )"},{"path":"/reference/lookup_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup table switch handler — lookup_recode","text":"src character, vector column containing value(s) referenced type character value denote lookup table used .import list  order list(new,old) containing values another lookup table existing environment","code":""},{"path":"/reference/lookup_recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup table switch handler — lookup_recode","text":"list object recoded field","code":""},{"path":"/reference/lookup_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup table switch handler — lookup_recode","text":"","code":"df <- data.frame(   spec = c(     sample(grep(\")\",                 respeciate_organism$previous_organism_name,                 value=TRUE,                 invert = TRUE),            9),     \"ESCHERICHIA COLI\",\"SARS-COV-2\",\"CANDIDA AUREUS\"),   type = sample(specimen_type_grouping$specimen_type,12),   date = sample(seq.Date(from = Sys.Date()-365,                          to = Sys.Date(),                          by = \"day\"),12) ) df <- df[order(df$date),]  # show the data before the changes df #>                                     spec              type       date #> 8                   CORYNEBACTERIUM EQUI         BRONCHIAL 2023-09-07 #> 7  ALCALIGENES XYLOSOXIDANS XYLOSOXIDANS              BURN 2023-09-18 #> 9                  RHIZOBIUM RADIOBACTER             WOUND 2023-10-15 #> 11                            SARS-COV-2             PENIS 2024-01-03 #> 3                   CITROBACTER DIVERSUS   IV CATHETER TIP 2024-01-15 #> 4                    PANTOEA AGGLOMERANS ARTERIAL LINE TIP 2024-01-16 #> 6        CALYMMATOBACTERIUM GRANULOMATIS        SKIN ULCER 2024-03-07 #> 5                  ANAEROCOCCUS PREVOTII    DENTAL ABSCESS 2024-03-10 #> 2                 STREPTOCOCCUS FAECALIS  PERITONEAL FLUID 2024-04-02 #> 1                       STOMATOCOCCUS SP              BONE 2024-04-22 #> 10                      ESCHERICHIA COLI           TRACHEA 2024-04-27 #> 12                        CANDIDA AUREUS        BIOPSY-NOS 2024-04-28  # check the lookup tables # observe the changes head(respeciate_organism[1:2]) #>                  previous_organism_name       organism_species_name #> 1             ALCALIGENES DENITRIFICANS ACHROMOBACTER DENITRIFICANS #> 2                ALCALIGENES PIECHAUDII    ACHROMOBACTER PIECHAUDII #> 3              ALCALIGENES XYLOSOXIDANS  ACHROMOBACTER XYLOSOXIDANS #> 4 ALCALIGENES XYLOSOXIDANS XYLOSOXIDANS  ACHROMOBACTER XYLOSOXIDANS #> 5                ACTINOBACULUM SCHAALII       ACTINOTIGNUM SCHAALII #> 6          TETRATHIOBACTER KASHMIRENSIS      ADVENELLA KASHMIRENSIS df$species <- lookup_recode(df$spec,'species') df[,c('spec','species','date')] #>                                     spec                     species       date #> 8                   CORYNEBACTERIUM EQUI            RHODOCOCCUS EQUI 2023-09-07 #> 7  ALCALIGENES XYLOSOXIDANS XYLOSOXIDANS  ACHROMOBACTER XYLOSOXIDANS 2023-09-18 #> 9                  RHIZOBIUM RADIOBACTER   AGROBACTERIUM TUMEFACIENS 2023-10-15 #> 11                            SARS-COV-2                  SARS-COV-2 2024-01-03 #> 3                   CITROBACTER DIVERSUS          CITROBACTER KOSERI 2024-01-15 #> 4                    PANTOEA AGGLOMERANS         PANTOEA AGGLOMERANS 2024-01-16 #> 6        CALYMMATOBACTERIUM GRANULOMATIS    KLEBSIELLA GRANULOMATIS  2024-03-07 #> 5                  ANAEROCOCCUS PREVOTII PEPTOSTREPTOCOCCUS PREVOTII 2024-03-10 #> 2                 STREPTOCOCCUS FAECALIS       ENTEROCOCCUS FAECALIS 2024-04-02 #> 1                       STOMATOCOCCUS SP                   ROTHIA SP 2024-04-22 #> 10                      ESCHERICHIA COLI            ESCHERICHIA COLI 2024-04-27 #> 12                        CANDIDA AUREUS              CANDIDA AUREUS 2024-04-28  head(specimen_type_grouping) #>      specimen_type specimen_group #> 1            BLOOD          Blood #> 2       CORD BLOOD          Blood #> 3            JOINT Bones & Joints #> 4   SYNOVIAL FLUID Bones & Joints #> 5             BONE Bones & Joints #> 6 JOINT PROSTHESIS Bones & Joints df$grp <- lookup_recode(df$type,'specimen') df[,c('species','type','grp','date')] #>                        species              type                     grp #> 8             RHODOCOCCUS EQUI         BRONCHIAL Lower Respiratory Tract #> 7   ACHROMOBACTER XYLOSOXIDANS              BURN           Swabs-General #> 9    AGROBACTERIUM TUMEFACIENS             WOUND             Wound Swabs #> 11                  SARS-COV-2             PENIS                 Genital #> 3           CITROBACTER KOSERI   IV CATHETER TIP            Tips & Lines #> 4          PANTOEA AGGLOMERANS ARTERIAL LINE TIP            Tips & Lines #> 6     KLEBSIELLA GRANULOMATIS         SKIN ULCER           Swabs-General #> 5  PEPTOSTREPTOCOCCUS PREVOTII    DENTAL ABSCESS           URT/Mouth/Ear #> 2        ENTEROCOCCUS FAECALIS  PERITONEAL FLUID                  Fluids #> 1                    ROTHIA SP              BONE          Bones & Joints #> 10            ESCHERICHIA COLI           TRACHEA Lower Respiratory Tract #> 12              CANDIDA AUREUS        BIOPSY-NOS           Swabs-General #>          date #> 8  2023-09-07 #> 7  2023-09-18 #> 9  2023-10-15 #> 11 2024-01-03 #> 3  2024-01-15 #> 4  2024-01-16 #> 6  2024-03-07 #> 5  2024-03-10 #> 2  2024-04-02 #> 1  2024-04-22 #> 10 2024-04-27 #> 12 2024-04-28  # for a tidyverse use # df %>% mutate(spec=lookup_recode(spec,'species))  # manual input of your own lookup # .import=list(new,old) lookup_recode(   \"ALCALIGENES DENITRIFICANS\",   type = 'manual',   .import=list(respeciate_organism$organism_species_name,                respeciate_organism$previous_organism_name)   ) #> [1] \"ACHROMOBACTER DENITRIFICANS\""},{"path":"/reference/proxy_episode_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"HES/SUS Episode Date Cleaning — proxy_episode_dates","title":"HES/SUS Episode Date Cleaning — proxy_episode_dates","text":"Correcting missing end dates HES/SUS episodes","code":""},{"path":"/reference/proxy_episode_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HES/SUS Episode Date Cleaning — proxy_episode_dates","text":"","code":"proxy_episode_dates(   x,   group_vars,   spell_start_date,   spell_end_date,   discharge_destination,   .dropTmp = TRUE,   .forceCopy = FALSE )"},{"path":"/reference/proxy_episode_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HES/SUS Episode Date Cleaning — proxy_episode_dates","text":"x data frame; converted data.table group_vars vector containing variables used record grouping, minimum patient identifier spell_start_date Inpatient provider spell episode admission date spell_end_date Inpatient provider spell episode discharge  date discharge_destination CDS discharge destination code .dropTmp default TRUE; logical drop tmp values used .forceCopy default FALSE; TRUE force data.table take copy instead editing data without reference","code":""},{"path":"/reference/proxy_episode_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HES/SUS Episode Date Cleaning — proxy_episode_dates","text":"data.table cleaned start end dates, indicator proxy_missing value changed","code":""},{"path":"/reference/proxy_episode_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HES/SUS Episode Date Cleaning — proxy_episode_dates","text":"","code":"proxy_test <- data.frame(   id = c(     rep(3051, 4),     rep(7835,3),     rep(9891,3),     rep(1236,3)   ),   provider = c(     rep(\"QKJ\", 4),     rep(\"JSD\",3),     rep(\"YJG\",3),     rep(\"LJG\",3)   ),   spell_start = as.Date(c(     \"2020-07-03\", \"2020-07-14\", \"2020-07-23\", \"2020-08-05\",     \"2020-11-01\", \"2020-11-13\", \"2020-12-01\",     \"2020-03-28\", \"2020-04-06\", \"2020-04-09\",     \"2020-10-06\", \"2020-11-05\", \"2020-12-25\"   )),   spell_end = as.Date(c(     \"2020-07-11\", \"2020-07-22\", \"2020-07-30\", \"2020-07-30\",     \"2020-11-11\", NA, \"2020-12-03\",     \"2020-03-28\", NA, \"2020-04-09\",     \"2020-10-06\", \"2020-11-05\", NA   )),   disdest = c(     19, 19, 51, 19,     19, 19, 19,     51, 98, 19,     19, 19, 98   ) )   proxy_episode_dates(   x=proxy_test,   group_vars = c('id','provider'),   spell_start_date = 'spell_start',   spell_end_date = 'spell_end',   discharge_destination = 'disdest' )[] #>        id provider spell_start  spell_end disdest proxy_missing #>     <num>   <char>      <Date>     <Date>   <num>         <num> #>  1:  1236      LJG  2020-10-06 2020-10-06      19             0 #>  2:  1236      LJG  2020-11-05 2020-11-05      19             0 #>  3:  1236      LJG  2020-12-25 2024-08-06      98             1 #>  4:  3051      QKJ  2020-07-03 2020-07-11      19             0 #>  5:  3051      QKJ  2020-07-14 2020-07-22      19             0 #>  6:  3051      QKJ  2020-07-23 2020-07-30      51             0 #>  7:  3051      QKJ  2020-07-30 2020-08-05      19             4 #>  8:  7835      JSD  2020-11-01 2020-11-11      19             0 #>  9:  7835      JSD  2020-11-13 2020-11-30      19             3 #> 10:  7835      JSD  2020-12-01 2020-12-03      19             0 #> 11:  9891      YJG  2020-03-28 2020-03-28      51             0 #> 12:  9891      YJG  2020-04-06 2020-04-09      98             2 #> 13:  9891      YJG  2020-04-09 2020-04-09      19             0"},{"path":"/reference/respeciate_generic.html","id":null,"dir":"Reference","previous_headings":"","what":"Respeciate unspecified samples — respeciate_generic","title":"Respeciate unspecified samples — respeciate_generic","text":"samples within SGSS submitted laboratories \"GENUS SP\" \"GENUS UNNAMED\". However, may also fully identified sample taken site within recent time period.  function captures species_col  another sample within X-days unspeciated isolate.","code":""},{"path":"/reference/respeciate_generic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Respeciate unspecified samples — respeciate_generic","text":"","code":"respeciate_generic(   x,   group_vars,   species_col,   date_col,   window = c(0:Inf),   .forceCopy = FALSE )"},{"path":"/reference/respeciate_generic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Respeciate unspecified samples — respeciate_generic","text":"x data.frame data.table object group_vars minimum grouping set variables like samples character vector; suggest c('patient_id','specimen_type','genus') species_col character containing column organism species_col name date_col character containing column specimen/sample date_col window integer representing number days allow sample respeciated .forceCopy default FALSE; TRUE force data.table take copy instead editing data without reference","code":""},{"path":"/reference/respeciate_generic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Respeciate unspecified samples — respeciate_generic","text":"data.table recharacterised species_col column","code":""},{"path":"/reference/respeciate_generic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Respeciate unspecified samples — respeciate_generic","text":"","code":"df <- data.frame( ptid = c(round(runif(25,1,5))), spec = sample(c(\"KLEBSIELLA SP\",                 \"KLEBSIELLA UNNAMED\",                 \"KLEBSIELLA PNEUMONIAE\",                 \"KLEBEIELLA OXYTOCA\"),               25,replace = TRUE), type = \"BLOOD\", specdate = sample(seq.Date(Sys.Date()-21,Sys.Date(),\"day\"),25,replace = TRUE) )  respeciate_generic(x=df,                    group_vars=c('ptid','type'),                    species_col='spec',                    date_col='specdate',                    window = 14)[] #> 14-day round 1: 7 SP or UNNAMMED isolates respeciated #> 14-day round 2: 1 SP or UNNAMMED isolates respeciated #> 14-day round 3: 0 SP or UNNAMMED isolates respeciated #>      ptid                  spec   type   specdate #>     <num>                <char> <char>     <Date> #>  1:     1         KLEBSIELLA SP  BLOOD 2024-08-03 #>  2:     2    KLEBEIELLA OXYTOCA  BLOOD 2024-07-16 #>  3:     2    KLEBEIELLA OXYTOCA  BLOOD 2024-07-16 #>  4:     2    KLEBEIELLA OXYTOCA  BLOOD 2024-07-20 #>  5:     2    KLEBEIELLA OXYTOCA  BLOOD 2024-07-20 #>  6:     2    KLEBEIELLA OXYTOCA  BLOOD 2024-07-20 #>  7:     2 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-21 #>  8:     2 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-22 #>  9:     2 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-27 #> 10:     2 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-28 #> 11:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-17 #> 12:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-21 #> 13:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-25 #> 14:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-26 #> 15:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-27 #> 16:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-28 #> 17:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-08-01 #> 18:     3    KLEBEIELLA OXYTOCA  BLOOD 2024-08-02 #> 19:     3 KLEBSIELLA PNEUMONIAE  BLOOD 2024-08-06 #> 20:     4         KLEBSIELLA SP  BLOOD 2024-07-22 #> 21:     4         KLEBSIELLA SP  BLOOD 2024-07-29 #> 22:     4         KLEBSIELLA SP  BLOOD 2024-08-01 #> 23:     5    KLEBEIELLA OXYTOCA  BLOOD 2024-07-16 #> 24:     5 KLEBSIELLA PNEUMONIAE  BLOOD 2024-07-24 #> 25:     5    KLEBEIELLA OXYTOCA  BLOOD 2024-08-06 #>      ptid                  spec   type   specdate"},{"path":"/reference/respeciate_organism.html","id":null,"dir":"Reference","previous_headings":"","what":"Respeciated organisms — respeciate_organism","title":"Respeciated organisms — respeciate_organism","text":"Occasionally, research shows two organisms, previously thought different fact one . reverse also true.  manually updated list. organisms missing, new respeciates added, please raise issue push request epidm GitHub","code":""},{"path":"/reference/respeciate_organism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Respeciated organisms — respeciate_organism","text":"","code":"respeciate_organism"},{"path":"/reference/respeciate_organism.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Respeciated organisms — respeciate_organism","text":"previous_organism_name organism used known , form GENUS SPECIES organism_species_name organism known now, form GENUS SPECIES organism_genus_name genus recoded organism genus_change 0/1 flag indicate genus changed genu_all_species 0/1 flag indicate species genus change","code":""},{"path":"/reference/specimen_type_grouping.html","id":null,"dir":"Reference","previous_headings":"","what":"Specimen type grouping — specimen_type_grouping","title":"Specimen type grouping — specimen_type_grouping","text":"order help clean analysis based group specimen types, lookup table created help group sampling sites.  manually updated list. organisms missing, new respeciates added, please raise issue push request epidm GitHub","code":""},{"path":"/reference/specimen_type_grouping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specimen type grouping — specimen_type_grouping","text":"","code":"specimen_type_grouping"},{"path":"/reference/specimen_type_grouping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Specimen type grouping — specimen_type_grouping","text":"specimen_type primary specimen type detail specimen_group simple grouping like specimen sites","code":""},{"path":"/reference/sql_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and Read a SQL query — sql_clean","title":"Clean and Read a SQL query — sql_clean","text":"utility function read SQL query character object, clipboard text file remove comments use database query packages","code":""},{"path":"/reference/sql_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and Read a SQL query — sql_clean","text":"","code":"sql_clean(sql)"},{"path":"/reference/sql_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and Read a SQL query — sql_clean","text":"sql SQL file text string","code":""},{"path":"/reference/sql_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and Read a SQL query — sql_clean","text":"cleaned SQL query without comments character string","code":""},{"path":"/reference/sql_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and Read a SQL query — sql_clean","text":"","code":"testSQL <- c( \"/********* INTRO HEADER COMMENTS\", \"*********/\", \"  SELECT \", \"  [VAR 1]  -- with comments\", \",[VAR 2]\",\",[VAR 3]\", \"FROM DATASET \",\"-- output here\") sql_clean(testSQL) #> [1] \"SELECT [VAR 1] ,[VAR 2] ,[VAR 3] FROM DATASET\""},{"path":"/reference/sql_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to a SQL database — sql_connect","title":"Connect to a SQL database — sql_connect","text":"function help setup connections SQL databases acting wrapper odbc DBI packages. Used sql_* tools within epidm. uses credential manager within system assumes using trusted connection.","code":""},{"path":"/reference/sql_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to a SQL database — sql_connect","text":"","code":"sql_connect(server, database)"},{"path":"/reference/sql_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to a SQL database — sql_connect","text":"server string containing server connection; note servers may require use double backslash \\\\ database string containing database name within data store","code":""},{"path":"/reference/sql_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to a SQL database — sql_connect","text":"SQL connection object","code":""},{"path":[]},{"path":"/reference/sql_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to a SQL database — sql_connect","text":"","code":"if (FALSE) { # \\dontrun{ sql <- list(   dsn = list(ser = 'covid.ukhsa.gov.uk',              dbn = 'infections') )  sgss_con = sql_connect(server = sql$dsn$ser, database = sql$dsn$dbn) } # }"},{"path":"/reference/sql_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a table from a SQL database — sql_read","title":"Read a table from a SQL database — sql_read","text":"Read table object SQL database. Acts wrapper odbc DBI packages.","code":""},{"path":"/reference/sql_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a table from a SQL database — sql_read","text":"","code":"sql_read(server, database, sql)"},{"path":"/reference/sql_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a table from a SQL database — sql_read","text":"server string containing server connection database string containing database name within data store sql string containing SQL query .sql/.txt SQL query","code":""},{"path":"/reference/sql_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a table from a SQL database — sql_read","text":"table SQL database","code":""},{"path":[]},{"path":"/reference/sql_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a table to a SQL database — sql_write","title":"Write a table to a SQL database — sql_write","text":"Write table object SQL database. Acts wrapper odbc DBI packages additional checks ensure upload completes.","code":""},{"path":"/reference/sql_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a table to a SQL database — sql_write","text":"","code":"sql_write(x, server, database, tablename)"},{"path":"/reference/sql_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a table to a SQL database — sql_write","text":"x data.frame/data.table/tibble object server string containing server connection database string containing database name within data store tablename string containing chosen SQL database table name","code":""},{"path":"/reference/sql_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a table to a SQL database — sql_write","text":"writes data.frame/data.table/tibble SQL database","code":""},{"path":"/reference/uk_patient_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Patient ID record grouping — uk_patient_id","title":"Patient ID record grouping — uk_patient_id","text":"Groups patient records multiple isolates single integer patientID grouping patient identifiers. Grouping based following stages: matching nhs number date birth Hospital number &  Date Birth NHS number & Hospital Number NHS number & Name Hospital number & Name Sex & Date Birth & Surname Sex & Date Birth & Fuzzy Name Sex & Year Month Birth & Fuzzy Name Postcode & Name Name Swaps (first last name wrong way around) Identifiers copied missing invalid grouped records.","code":""},{"path":"/reference/uk_patient_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Patient ID record grouping — uk_patient_id","text":"","code":"uk_patient_id(   data,   id = list(nhs_number = \"nhs_number\", hospital_number = \"patient_hospital_number\",     date_of_birth = \"date_of_birth\", sex_mfu = \"sex\", forename = \"forename\", surname =     \"surname\", postcode = \"postcode\"),   .useStages = c(1:11),   .sortOrder,   .keepValidNHS = FALSE,   .forceCopy = FALSE )"},{"path":"/reference/uk_patient_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Patient ID record grouping — uk_patient_id","text":"data data.frame data.table containing patient data id named list provide column names identifiers, quoted nhs_number patient NHS number hospital_number patient Hospital numbers also known local patient identifier date_of_birth patient date birth sex_mfu patient sex gender field Male/Female/Unknown forename patient forename surname patient surname postcode patient postcode .useStages optional, default 1:11; set 1 wish patient ID assigned cases DOB NHS number, set 2 wish patient ID assigned cases hospital number (HOS) DOB, set 3 wish patient ID assigned cases NHS HOS number, set 4 wish patient ID assigned cases NHS number surname, set 5 wish patient ID assigned cases hospital number surname, set 6 wish patient ID assigned cases DOB surname, set 7 wish patient ID assigned cases sex full name, set 8 wish patient ID assigned cases sex, DOB fuzzy name, set 9 wish patient ID assigned cases DOB fuzzy name, set 10 wish patient ID assigned cases name postcode, set 11 wish patient ID assigned cases first name second name changing order date birth. .sortOrder optional; column character allow sorting order id generation .keepValidNHS optional, default FALSE; set TRUE wish retain column NHS checksum result stored BOOLEAN .forceCopy optional, default FALSE; TRUE force data.table take copy instead editing data without reference","code":""},{"path":"/reference/uk_patient_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Patient ID record grouping — uk_patient_id","text":"dataframe one new variable: id unique patient id valid_nhs retained using argument .keepValidNHS=TRUE, BOOLEAN containing result NHS checksum validation","code":""},{"path":"/reference/uk_patient_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Patient ID record grouping — uk_patient_id","text":"","code":"uk_patient_id(  data = head(epidm::lab_data,1000),  id = list(    nhs_number = 'nhs_number',    hospital_number = 'local_patient_identifier',    date_of_birth = 'patient_birth_date',    sex_mfu = 'sex',    forename = 'forename',    surname = 'surname'  ),  .sortOrder = 'specimen_date',  .forceCopy = TRUE )[] #>          id nhs_number local_patient_identifier patient_birth_date    sex #>       <int>     <char>                   <char>             <Date> <char> #>    1:     1  852542115                  AY45405         1952-03-31      F #>    2:     2  636618808                  AN80559         1974-10-16      F #>    3:     3  676931293                  BE25621         1984-11-12      F #>    4:     4  150995260                  JY96040         1949-05-13      M #>    5:     5  656066785                   CK3584         1944-02-03      F #>   ---                                                                     #>  996:   996  831527085                  HZ50426         1934-06-18      F #>  997:   997  470415263                  AX81005         1971-08-06      F #>  998:   998  581923601                  QZ18729         1964-02-14      M #>  999:   999  982821706                  HD14018         1969-02-22      F #> 1000:  1000  541747444                  EI64224         1989-02-14      F #>         surname forename  organism_species_name specimen_date specimen_type #>          <char>   <char>                 <char>        <Date>        <fctr> #>    1:   CHITTUM  DARLENE PSEUDOMONAS AERUGINOSA    2020-01-14  URINE/KIDNEY #>    2:  AL-GHANI    CALIE  STAPHYLOCOCCUS AUREUS    2020-01-14  URINE/KIDNEY #>    3:     MYERS    DEBRA  KLEBSIELLA PNEUMONIAE    2020-01-14         BLOOD #>    4:   BLEVANS    DANTE PSEUDOMONAS AERUGINOSA    2020-01-17         BLOOD #>    5:   GROOVER  NAJEEMA  KLEBSIELLA PNEUMONIAE    2020-02-01         BLOOD #>   ---                                                                       #>  996:     BEALS    JAYLA  STAPHYLOCOCCUS AUREUS    2023-12-24         BLOOD #>  997:  CASTILLO  YOLANDA  KLEBSIELLA PNEUMONIAE    2023-12-25         BLOOD #>  998: EL-HALABY    RAJAA  STAPHYLOCOCCUS AUREUS    2023-12-26  URINE/KIDNEY #>  999:   THURMAN      MAY PSEUDOMONAS AERUGINOSA    2023-12-27  URINE/KIDNEY #> 1000:  KILSTROM     KALI  KLEBSIELLA PNEUMONIAE    2023-12-29         BLOOD #>       lab_code local_authority_name local_authority_code #>         <char>               <char>               <char> #>    1:  ZJ60076              Enfield            E09000010 #>    2:  VJ49160              Salford            E08000006 #>    3:  ID41899        South Norfolk            E07000149 #>    4:  JH70033           Spelthorne            E07000213 #>    5:  PH46212            Sheffield            E08000019 #>   ---                                                    #>  996:  WI90375       South Lakeland            E07000031 #>  997:   CW7915           Manchester            E08000003 #>  998:  VJ49160                Wigan            E08000010 #>  999:  YK19355            Redbridge            E09000026 #> 1000:  GF74315       South Somerset            E07000189"},{"path":"/reference/valid_nhs.html","id":null,"dir":"Reference","previous_headings":"","what":"NHS Number Validity Check — valid_nhs","title":"NHS Number Validity Check — valid_nhs","text":"Check NHS numbers valid based checksum algorithm uses first 9 digits, multiplied 10 2 eg digit 1x10, d2x9 sum products first 9 digits divided 11 remainder checked 10th digit remainder 11, replaced 0","code":""},{"path":"/reference/valid_nhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHS Number Validity Check — valid_nhs","text":"","code":"valid_nhs(nhs_number)"},{"path":"/reference/valid_nhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NHS Number Validity Check — valid_nhs","text":"nhs_number vector","code":""},{"path":"/reference/valid_nhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NHS Number Validity Check — valid_nhs","text":"vector, 1 NHS number valid, 0 valid","code":""},{"path":"/reference/valid_nhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHS Number Validity Check — valid_nhs","text":"","code":"test <- floor(runif(1000,1000000000,9999999999)) valid_nhs(test) #>    [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>   [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>   [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 #>  [112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 #>  [149] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [186] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 #>  [223] 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 #>  [260] 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 #>  [297] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 #>  [334] 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [371] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [408] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 #>  [445] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 #>  [482] 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 #>  [519] 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 #>  [556] 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 #>  [593] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 #>  [630] 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 #>  [667] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 #>  [704] 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 #>  [741] 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [778] 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 0 #>  [815] 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [852] 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [889] 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 #>  [926] 0 0 1 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [963] 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #> [1000] 0 valid_nhs(9434765919) #> [1] 1"},{"path":"/news/index.html","id":"epidm-105","dir":"Changelog","previous_headings":"","what":"epidm 1.0.5","title":"epidm 1.0.5","text":"Added ECDS destination_code lookups use lookup_recode show patients go &E attendance. Added new lookups inpatient admission_method discharge_destination; can called using epidm::lookup_recode. Change sapply purrr::map_dbl ensure type consistency prevent creation list cols. Implemented new steps record matching, including first/last name field swaps. Added new id_test sample data. add fuzzy match functionality patient_id","code":""},{"path":"/news/index.html","id":"epidm-104","dir":"Changelog","previous_headings":"","what":"epidm 1.0.4","title":"epidm 1.0.4","text":"CRAN release: 2022-07-11 fixed missing ‘;’ character SQL connection string","code":""},{"path":"/news/index.html","id":"epidm-103","dir":"Changelog","previous_headings":"","what":"epidm 1.0.3","title":"epidm 1.0.3","text":"CRAN release: 2022-07-06 change trusted_connection=true trusted_connection=yes ensure cross-functionality k8s linux SCarnall fix infinite loop case added pkgdown URL","code":""},{"path":"/news/index.html","id":"epidm-102","dir":"Changelog","previous_headings":"","what":"epidm 1.0.2","title":"epidm 1.0.2","text":"CRAN release: 2022-02-15 remove href links Description field","code":""},{"path":"/news/index.html","id":"epidm-101","dir":"Changelog","previous_headings":"","what":"epidm 1.0.1","title":"epidm 1.0.1","text":"Edits CRAN submission change print() message() prevent writing console. Added additional webservice links DESCRIPTION","code":""},{"path":"/news/index.html","id":"epidm-100","dir":"Changelog","previous_headings":"","what":"epidm 1.0.0","title":"epidm 1.0.0","text":"Added NEWS.md file track changes package. first release package CRAN submission.","code":""}]
