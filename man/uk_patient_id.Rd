% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/patient_id.R
\name{uk_patient_id}
\alias{uk_patient_id}
\title{Patient ID record grouping}
\usage{
uk_patient_id(
  data,
  id = list(nhs_number = "nhs_number", hospital_number = "patient_hospital_number",
    date_of_birth = "date_of_birth", sex_mfu = "sex", forename = "forename", surname =
    "surname", postcode = "postcode"),
  .useStages = c(1:11),
  .keepStages = FALSE,
  .keepValidNHS = FALSE,
  .sortOrder,
  .forceCopy = FALSE
)
}
\arguments{
\item{data}{a data.frame or data.table containing the patient data}

\item{id}{a named list to provide the column names with identifiers, quoted
\describe{
\item{\code{nhs_number}}{the patient NHS number}
\item{\code{hospital_number}}{the patient Hospital numbers also known as the local patient identifier}
\item{\code{date_of_birth}}{the patient date of birth}
\item{\code{sex_mfu}}{the patient sex or gender field as Male/Female/Unknown}
\item{\code{forename}}{the patient forename}
\item{\code{surname}}{the patient surname}
\item{\code{postcode}}{the patient postcode}
}}

\item{.useStages}{optional, default 1:11; set to 1 if you wish patient ID to
be assigned cases with the same DOB and NHS number, set to 2 if you wish patient
ID to be assigned to cases with the same hospital number (HOS) and DOB, set to
3 if you wish patient ID to be assigned cases with the same NHS and HOS number,
set to 4 if you wish patient ID to be assigned cases with the same NHS number
and surname, set to 5 if you wish patient ID to be assigned cases with the same
hospital number and surname, set to 6 if you wish patient ID to be assigned
cases with the same DOB and surname, set to 7 if you wish patient ID to be
assigned cases with the same sex and full name, set to 8 if you wish patient
ID to be assigned cases with the same sex, DOB and fuzzy name, set to 9 if you
wish patient ID to be assigned cases with the same DOB and fuzzy name, set to
10 if you wish patient ID to be assigned cases with the same name and postcode,
set to 11 if you wish patient ID to be assigned cases with the same first name
or second name in changing order and date of birth.}

\item{.keepStages}{optional, default FALSE; to generate a new column (stageMatch)
to retain the stage information for which the record matched the group.}

\item{.keepValidNHS}{optional, default FALSE; set TRUE if you wish to retain
the column with the NHS checksum result stored as a BOOLEAN}

\item{.sortOrder}{optional; a column as a character to allow a sorting
order on the id generation}

\item{.forceCopy}{optional, default FALSE; TRUE will force data.table to take a copy
instead of editing the data without reference}

\item{stage}{integer for flag}

\item{required}{vector for which fields are necessary}

\item{validation}{vector with validation columns}

\item{group}{vector with grouping columns}
}
\value{
A dataframe with one new variable:
\describe{
\item{\code{id}}{a unique patient id}
\item{\code{valid_nhs}}{if retained using argument \code{.keepValidNHS=TRUE}, a
BOOLEAN containing the result of the NHS checksum validation}
}

the ingest data frame with updated id column
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Groups patient records from multiple isolates with a single integer patientID
by grouping patient identifiers.

Grouping is based on the following stages:
\enumerate{
\item matching nhs number and date of birth
\item Hospital number &  Date of Birth
\item NHS number & Hospital Number
\item NHS number & Name
\item Hospital number & Name
\item Date of Birth & Surname
\item Sex & Full name
\item Sex & Year and Month of Birth & Fuzzy Name
\item Year and Month of Birth & Fuzzy Name
\item Postcode & Name
\item Name Swaps (when first and last name are the wrong way around)
}

Identifiers are copied over where they are missing or invalid to the grouped
records.

an internal function to undertake the validation and dedupe steps
within the uk_patient_id function for records with matching identifiers
}
\examples{
id_test <-
  data.frame(
    stringsAsFactors = FALSE,
    record_id = c(1L,2L,3L,4L,
                  5L,6L,7L,8L,9L,10L,11L,12L,13L,14L,15L,
                  16L,17L,18L,19L,20L,21L,22L,23L,24L),
    nhs_number = c(9435754422,
                   9435754422,NA,9435754422,5555555555,NA,
                   9435773982,NA,9999999999,NA,9435773982,NA,
                   9435802508,9435802508,NA,NA,9435802508,9435802508,NA,
                   3333333333,NA,9999999999,9435817777,
                   9435817777),
    local_patient_identifier = c(NA,"IG12067",
                                 NA,NA,"IG12067","IG12067","KR2535","KR2535",
                                 "KR2535",NA,NA,NA,"UK8734","UK8734",NA,NA,
                                 "UK8734","UK8734",NA,NA,"JH45204",
                                 "HS45202","HS45202","JH45204"),
    patient_birth_date = c("1993-07-16",
                           "1993-07-16","1993-07-16","1993-07-16",
                           "1993-07-16",NA,"1967-02-10",NA,"1967-02-10",NA,NA,
                           "1967-02-10",NA,NA,"1952-10-22","1952-10-22",
                           "1952-10-22",NA,"1947-09-14","1947-09-14",
                           "1947-09-14","1947-09-14","1947-09-14",
                           "1947-09-14"),
    sex = c("Male","Male",
            "Male","Male",NA,"Male","Female","Female",
            "Female","Female","Female","Female","Male",
            "Male","Male","Male","Male","Male","Male",
            "Male","Male","Male",NA,"Male"),
    forename = c(NA,"DENNIS",
                 NA,NA,"DENNIS",NA,"ELLIE","ELLIE",NA,
                 "ELLIE","ELLIE","ELLIE","IAN","IAN","MALCOLM",
                 "IAN","IAN",NA,"GRANT","ALAN","ALAN","ALAN",
                 "GRANT","ALAN"),
    surname = c(NA,"NEDRY",
                "NEDRY",NA,"NEDRY","NEDRY","SATTLER","SATTLER",
                NA,"SATTLER","SATTLER","SATTLER","M",NA,
                "IAN","MALCOLM","MALCOLM",NA,"ALAN","GRANT",
                "GRANT","GRANT","ALAN","GRANT"),
    postcode = c("HA4 0FF",
                 "HA4 0FF","HA4 0FF",NA,"HA4 0FF","HA4 0FF",
                 "L3 1DZ","L3 1DZ","L3 1DZ","L3 1DZ",NA,"L3 1DZ",
                 "BN14 9EP",NA,"BN14 9EP",NA,NA,NA,"CW6 9TX",
                 "CW6 9TX",NA,NA,NA,NA),
    specimen_date = c("2024-08-14",
                      "2023-02-03","2023-02-07","2023-02-04",
                      "2023-02-09","2024-08-14","2021-03-28","2021-03-28",
                      "2021-03-28","2021-03-28","2021-03-28",
                      "2021-03-28","2024-07-06","2024-07-06","2024-07-06",
                      "2023-10-31","2023-10-31","2023-10-31",
                      "2022-01-23","2022-01-24","2022-01-25","2022-01-26",
                      "2022-01-27","2022-01-28")
  )


uk_patient_id(
  data = id_test,
  id = list(
    nhs_number = 'nhs_number',
    hospital_number = 'local_patient_identifier',
    date_of_birth = 'patient_birth_date',
    sex_mfu = 'sex',
    forename = 'forename',
    surname = 'surname',
    postcode = 'postcode'
  ),
  .sortOrder = 'specimen_date',
  .useStages = c(1:11),
  .keepStages = TRUE,
  .forceCopy = TRUE)[]

}
